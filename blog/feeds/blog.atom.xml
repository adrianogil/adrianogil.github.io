<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Gil Labs - blog</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/blog.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2017-01-31T21:00:00-04:00</updated><entry><title>Como fazer um Space Invaders simples na Unity sem programação</title><link href="http://localhost:8000/visual-behaviors-pt.html" rel="alternate"></link><published>2017-01-31T21:00:00-04:00</published><updated>2017-01-31T21:00:00-04:00</updated><author><name>Adriano Gil</name></author><id>tag:localhost,2017-01-31:/visual-behaviors-pt.html</id><summary type="html">&lt;p class="first last"&gt;A very small self presentation&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Olá Pessoal,&lt;/p&gt;
&lt;p&gt;No post de hoje vou descrever como desenvolver uma versão simplificada do Space Invaders  na Unity. Esse tutorial não vai focar na programação, assim para gerar os comportamentos dos elementos de jogo, foi adotada uma série de scripts de comportamentos visuais (Visual Behaviors, um antigo projeto meu).&lt;/p&gt;
&lt;!-- New project --&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/00_first_screen.png" style="width: 542px; height: 124px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Começamos com a criação de um projeto novo na Unity, após pressionar o new da tela inicial. Agora, colocamos um nome de projeto e qual o diretório onde esse projeto deverá ser criado.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/01_new_project.png" style="width: 500px; height: 286px;" /&gt;
&lt;/div&gt;
&lt;p&gt;E assim o projeto “MyGame” foi criado com sucesso pela Unity. Na próxima figura, percebemos que no sistema de arquivos, a Unity criou três diretórios: Assets. Library e ProjectSettings. Na pasta Assets devemos colocar todos os arquivos que serão utilizados no jogo: scripts, spritesheets, texturas, modelos 3d, sons e etc. A pasta Library ficam os uma versão dos assets já compilados para se adequar as configurações de cada plataforma. Já na pasta ProjectSettings, a Unity armazena as configurações do projeto: seus sistemas de tags, layers, configurações de build e etc. Na pasta Temp o executável é montado no momento do processo de build do projeto.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/02_file_system_project.png" style="width: 408px; height: 124px;" /&gt;
&lt;/div&gt;
&lt;p&gt;A interface da unity é dividida principalmente nas seguintes tabs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hierarchy: mostra quais os gameobjects estão em cena.&lt;/li&gt;
&lt;li&gt;Inspector: permite inspecionar os componentes dos gamesobjects ou inspecionar as opções de configuração de projeto ou importação de assets.&lt;/li&gt;
&lt;li&gt;Project: espelha a pasta MyGame/Assets/ do sistema de arquivos&lt;/li&gt;
&lt;li&gt;Scene: é a minha cena de jogo, onde posso posicionar gameobjects&lt;/li&gt;
&lt;li&gt;Game: é a tab que mostra a renderização e a execução do jogo&lt;/li&gt;
&lt;li&gt;Console: mostra os erros e warnings do projeto&lt;/li&gt;
&lt;li&gt;AssetStore: uma loja de assets da Unity para venda e compra de qualquer tipo de artefato para o desenvolvimento com a Unity.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/02_unity.png" style="width: 657px; height: 497px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Esse layout de tabs é o default. Pode ser trocado no menu superior direito por algum das opções disponíveis. Ou mesmo pode ser editado, as tabs podem ser arrastadas livremente e ao criar um layout que o agrade, essa opção pode ser salva e carregada posteriormente em qualquer outro projeto dessa mesma máquina. Observem que eu criei a minha própria opção: &amp;quot;CrazyLayout&amp;quot;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/03_unity_layout.png" style="width: 311px; height: 296px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Bem, vamos tentar entender o que temos no nosso projeto da &lt;strong&gt;Unity&lt;/strong&gt; até agora. Olhando para a tab de &lt;strong&gt;Hierarchy&lt;/strong&gt; vemos dois GameObjects: &lt;strong&gt;&amp;quot;Main Camera&amp;quot;&lt;/strong&gt; e &lt;strong&gt;&amp;quot;Directional Light&amp;quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/04_initial_hierarchy.png" style="width: 206px; height: 399px;" /&gt;
&lt;/div&gt;
&lt;p&gt;No GameObject da câmera vemos vários componentes: Transform, Camera, GUILayer, FlareLayer, AudioListener.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/05_main_camera_gameobject.png" style="width: 276px; height: 201px;" /&gt;
&lt;/div&gt;
&lt;p&gt;O componente &lt;strong&gt;Camera&lt;/strong&gt; permite a renderização do jogo. Podemos pensar que ele age como uma câmera filmando nossa cena e apresentando o conteúdo filmando ao usuário através da tab &lt;strong&gt;Game&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/06_camera_component.png" style="width: 275px; height: 325px;" /&gt;
&lt;/div&gt;
&lt;p&gt;O componente &lt;strong&gt;Transform&lt;/strong&gt; é um dos mais importantes, através dele podemos alterar o posicionamento dos gameobjects no espaço da cena, além de sua rotação e escala.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/07_transform_component.png" style="width: 277px; height: 79px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Agora vamos criar algumas pastas na unity. Geralmente, recomenda-se seguir um padrão de &lt;a class="reference external" href="https://twitter.com/CiroContns/status/831547413290766338"&gt;nomes de pastas&lt;/a&gt; para facilitar a busca por assets a medida que o projeto aumenta de tamanho.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/08_create_folder.png" style="width: 549px; height: 542px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Neste projeto vamos usar as pastas: Prefabs, Scenes e Scripts.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/09_folders_created.png" style="width: 361px; height: 226px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Vamos aproveitar para salvar nossa cena em &lt;strong&gt;Scenes/Game.unity&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/10_save_scene.png" style="width: 250px; height: 321px;" /&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;em&gt;Unity&lt;/em&gt; traz alguns elementos básicos que podemos usar em nossos jogos. Seguindo a opção vista na imagem abaixo, vamos adicionar um cubo na cena.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/11_create_cube.png" style="width: 321px; height: 531px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Assim, na tab de &lt;strong&gt;Hierarchy&lt;/strong&gt; podemos conferir o cubo adicionado.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/12_cube_gameobject.png" style="width: 614px; height: 353px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Já na tab de &lt;strong&gt;Inspector&lt;/strong&gt;, verificamos seus componentes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt;: para posicionamento, rotação e mudança de escala&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MeshFilter&lt;/strong&gt;: que armazena as informações de geometria do objeto (aka. Mesh).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BoxCollider&lt;/strong&gt;: um componente importante para detectar colisões no jogo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MeshRenderer&lt;/strong&gt;: renderiza o nosso cubo a partir das informações de geometria contidas no MeshFilter e também usando as informações providas pelo Material&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/13_cube_components.png" style="width: 633px; height: 160px;" /&gt;
&lt;/div&gt;
&lt;p&gt;O posicionamento do cubo pode ser alterado ao inserir novos valores nos campos de &lt;strong&gt;Position&lt;/strong&gt; do &lt;strong&gt;Transform&lt;/strong&gt;. Também é possível na cena utilizar as setas azul, vermelha e verde que aparecem ao selecionar o cubo. Esse tipo de element visual é conhecido como &lt;strong&gt;Gizmo&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/14_cube_transform.png" style="width: 700px; height: 281px;" /&gt;
&lt;/div&gt;
&lt;p&gt;É possível resetar todas as alterações no &lt;strong&gt;Transform&lt;/strong&gt; atráves da opções &lt;strong&gt;Reset&lt;/strong&gt; no menu de configurações do componente.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/15_transform_reset.png" style="width: 495px; height: 253px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Para facilitar nossa manipulação do cubo, vamos ativar as opções de &lt;em&gt;snap&lt;/em&gt;. No modo snap o cubo pode ser arrastado para qualquer uma das três direções em saltos de uma unidade fixa.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/16_snap_settings_menu.png" style="width: 338px; height: 607px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Na janela de &lt;strong&gt;Snap Settings&lt;/strong&gt; podemos configurar a movimentação do nosso cubo em modo &lt;em&gt;snap&lt;/em&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/17_snap_settings_window.png" style="width: 286px; height: 213px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Ao pressionar Ctrl+D ou Cmd+D podemos clonar nosso cubo, e ao movimentar o cubo enquanto pressiona o Ctrl/Cmd podemos realizar o seu deslocamento em modo &lt;em&gt;snap&lt;/em&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/18_cube_clone.png" style="width: 478px; height: 272px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Clonando vários cubos podemos fazer nossa linha, com exatos 13 cubos.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/19_cubes_selection.png" style="width: 614px; height: 291px;" /&gt;
&lt;/div&gt;
&lt;p&gt;A opção &lt;strong&gt;Empty&lt;/strong&gt; permite criar um GameObject vazio, somente com o componente &lt;strong&gt;Transform&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/20_create_empty.png" style="width: 272px; height: 347px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Vou renomear o GameObject vazio para 'Line' e então resetar o &lt;strong&gt;Transform&lt;/strong&gt; para seus valores padrões. Ao selecionar todos os cubos, podemos arrastá-los para dentro da 'Line'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/21_create_lines.png" style="width: 700px; height: 233px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Para melhor visualizar e editar o cubo, vou alterar as opções de &lt;a class="reference external" href="https://docs.unity3d.com/Manual/ViewModes.html"&gt;shading&lt;/a&gt; da cena.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/22_shading_mode.png" style="width: 217px; height: 134px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Agora ao clonar a 'Line' também estaremos clonando todos os 13 cubos contidos nela. Dessa maneira podemos a 'Line' duas vezes e arrastá-las para cima da linha original. Ao selecionar individualmente um cubo, podemos deletar apertando del/Cmd+del. Em poucos passos, nossos cubos podem ficar no formato da figura abaixo.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/23_copy_lines.png" style="width: 660px; height: 246px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Copiando mais uma linha para cima, temos o corpo do nosso personagem. Para deixar a visualização dos objetos mais fácil, vou criar um GameObject vazio 'Body', resetar seu &lt;strong&gt;Transform&lt;/strong&gt; e colocar como filhos todos os outros objetos 'Line' criados.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/24_finished_body.png" style="width: 625px; height: 251px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Copiando um cubo começamos o processo de criação da antena.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/25_started_antenna.png" style="width: 614px; height: 269px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Aproveito para criar um GameObject vazio chamado 'Antenna' resetando seu &lt;strong&gt;Transform&lt;/strong&gt; e arrasto o cubo criado anteriormente.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/26_antenna_empty.png" style="width: 700px; height: 227px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Clonando mais alguns cubos, finalizamos a 'Antenna'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/27_finished_antenna.png" style="width: 656px; height: 301px;" /&gt;
&lt;/div&gt;
&lt;p&gt;O próximo passo é criar um GameObject 'Claws' com seu &lt;strong&gt;Transform&lt;/strong&gt; resetado.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/28_claws_empty.png" style="width: 291px; height: 178px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Clonando os cubos, tal como dispostos na imagem abaixo, finalizamos as garras do nosso personagem.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/29_claws_cubes.png" style="width: 648px; height: 333px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Agora nós temos o nosso &lt;em&gt;Space Invader&lt;/em&gt;. Para sua melhor edição, crio um GameObject 'Cubes' com &lt;strong&gt;Transform&lt;/strong&gt; resetado e arrasto o 'Body', 'Antenna' e 'Claws'. Por fim, vamos criar um GameObject 'SpaceInvaders' também resetando seu &lt;strong&gt;Transform&lt;/strong&gt; para onde jogamos o 'Cubes'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/30_space_invaders_cubes.png" style="width: 674px; height: 242px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Selecionando o 'Cubes' alteramos sua escala para (0.2, 0.2, 0.2)&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/31_downscale_invader.png" style="width: 700px; height: 199px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Clicando na tab Games, podemos ver como o personagem será visualizado pelo jogador.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/32_invader_game_tab.png" style="width: 412px; height: 254px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Na nossa câmera, alteramos a propriedade &lt;em&gt;'Clear Flags'&lt;/em&gt; para 'Solid Color' e o cor de Background para (0,0,0,0).&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/33_camera_clear_flags.png" style="width: 700px; height: 225px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Clonando e criando objetos vazios como nos passos anteriores, temos o nosso 'Player'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/34_player_cubes.png" style="width: 700px; height: 269px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Agora na tab de &lt;strong&gt;Game&lt;/strong&gt; podemos visualizar os nossos personagens.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/35_player_game_tab.png" style="width: 430px; height: 345px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Para adicionar mais movimento para nossa cena, vamos usar alguns scripts de programação &lt;a class="reference external" href="https://github.com/adrianogil/VisualBehaviors"&gt;Visual&lt;/a&gt; para dentro da pasta 'Scripts'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/36_copy_scripts.png" style="width: 234px; height: 274px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Inspecionado o GameObject 'SpaceInvaders' podemos adicionar novos componentes pressionando o botão 'Add Component'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/37_add_component.png" style="width: 279px; height: 509px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Adicionando o script 'Move' do VisualBehaviors.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/38_add_move_invader.png" style="width: 700px; height: 257px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Adicionando e configurando o script 'Move' do VisualBehaviors.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/39_callevent_invader.png" style="width: 276px; height: 497px;" /&gt;
&lt;/div&gt;
&lt;p&gt;O script 'CallEvent' permite alterar o comportamento de outros scripts.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/40_configure_callevent.png" style="width: 276px; height: 183px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Na bloco de 'Action', pressionamos o botão de '+' para adicionar uma ação. Selecionamos um GameObject que irá sofrer a modificação de comportamento.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/41_configure_callevent.png" style="width: 612px; height: 500px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Agora, escolhemos qual método de qual componente será alterado. O método 'ChangeDirectionX' permite inverter a direção de movimento do script 'Move'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/42_configure_callevent.png" style="width: 396px; height: 422px;" /&gt;
&lt;/div&gt;
&lt;p&gt;O movimento do jogador pode ser implementado por dois componentes 'Move'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/43_move_player.png" style="width: 280px; height: 479px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Então criamos o GameObject 'Bullets' tal como mostrado na figura abaixo.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/44_bullets_gameobject.png" style="width: 700px; height: 294px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Adicionando o componente 'Move' para que nossa bala possa se movimentar para cima em direção ao 'SpaceInvader'.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/45_bullets_move.png" style="width: 279px; height: 340px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Arrastando o GameObject 'Bullets' para a tab de &lt;strong&gt;Project&lt;/strong&gt; podemos criar um &lt;a class="reference external" href="https://docs.unity3d.com/Manual/Prefabs.html"&gt;prefab&lt;/a&gt;, um objeto pre-fabricado que pode ser replicado ao longo do nosso jogo.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/46_bullets_prefab.png" style="width: 241px; height: 240px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Vamos alterar a &lt;strong&gt;layer&lt;/strong&gt; do objeto 'Bullets'&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/47_edit_settings_layers.png" style="width: 431px; height: 715px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Criamos a &lt;strong&gt;layer&lt;/strong&gt; 'Bullets'&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/48_tags_and_layers.png" style="width: 261px; height: 315px;" /&gt;
&lt;/div&gt;
&lt;p&gt;E alteramos o prefab 'Bullets'&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/49_bullets_add_layer.png" style="width: 321px; height: 200px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Ao adicionar o script 'Generate' podemos gerar nossos disparos.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/50_player_gen_bullets.png" style="width: 276px; height: 684px;" /&gt;
&lt;/div&gt;
&lt;p&gt;No 'SpaceInvaders' adicionamos o script 'DestroyMe', configurando o nosso inimigo para ser destruído ao ser tocado por algum objeto da &lt;strong&gt;layer&lt;/strong&gt; 'Bullets' Também adicionamos o componente de colisão 'BoxCollider' e um RigidBody sem gravidade e com suas rotações congeladas.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/51_invader_collision.png" style="width: 311px; height: 616px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Não podemos esquecer de ativar o checkbox de 'isTrigger' do 'BoxCollider' do nosso inimigo.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/52_invader_collider.png" style="width: 700px; height: 472px;" /&gt;
&lt;/div&gt;
&lt;p&gt;E na bala, adicionamos um BoxCollider também como trigger.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="First Screen" src="images/2017-02-12-visualbehaviors/53_bullets_collider.png" style="width: 700px; height: 295px;" /&gt;
&lt;/div&gt;
&lt;!-- My components --&gt;
&lt;!-- How to create a space invaders --&gt;
&lt;p&gt;Até um próximo tutorial!&lt;/p&gt;
&lt;!-- This will be turned into :abbr:`HTML (HyperText Markup Language)`. --&gt;
&lt;!-- [a link relative to content root]({filename}/article1.md) --&gt;
</content><category term="unity"></category></entry><entry><title>Kuarup: a Global Game Jam 2016 game</title><link href="http://localhost:8000/global-game-jam-2016.html" rel="alternate"></link><published>2016-02-14T14:00:00-04:00</published><updated>2016-02-14T14:00:00-04:00</updated><author><name>Adriano Gil</name></author><id>tag:localhost,2016-02-14:/global-game-jam-2016.html</id><summary type="html">&lt;p class="first last"&gt;Kuarup: a ggj16 game&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Some weeks ago, I have participated in one of the most famous game jams ever: &lt;a class="reference external" href="http://globalgamejam.org/"&gt;Global Game Jam&lt;/a&gt;. So I worked with some very talented guys that I’ve meet on Samsung Institute and on Samsung OCEAN: our designer Rafael Lima, and developers Bruno Araujo, Germano Assis and Marcus Brandt.&lt;/p&gt;
&lt;p&gt;At the game jam start, the theme was revealed: Ritual. So, we decided to create a color-based puzzle game about choosing cute monsters to sacrifice. So it's about ritual as repetition of tasks and ritual as magic and sacrifice.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Kuarup" src="images/2016-02-14-ggj16/screenshot.png" style="width: 300px; height: 600px;" /&gt;
&lt;p class="caption"&gt;A game level on Kuarup&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;My participation was only on main gameplay features, like the logic of block falling and eye-candy animations. It was sort of a PCG of elements where I’ve worked with the generation of those little monstrous blocks. Then, the challenge was about how to guarantee that current level is always achievable. Well, a pseudo-random method helped a lot and we also choose a mechanic where power-ups allow to remove blocks of a specific color.&lt;/p&gt;
&lt;p&gt;I really thank you my team for such interesting project and I hope we get to work again.&lt;/p&gt;
&lt;p&gt;And if are interested in the game, you can find the code on &lt;a class="reference external" href="https://github.com/baraujo/puzzlegame"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Until the next game jam!&lt;/p&gt;
&lt;!-- This will be turned into :abbr:`HTML (HyperText Markup Language)`. --&gt;
&lt;!-- [a link relative to content root]({filename}/article1.md) --&gt;
</content><category term="ggj16"></category><category term="unity3d"></category><category term="puzzle"></category><category term="color-based"></category></entry><entry><title>How to Install Theano, Blocks and Fuel</title><link href="http://localhost:8000/install-block-fuel-theano.html" rel="alternate"></link><published>2016-01-10T14:00:00-04:00</published><updated>2016-01-10T14:00:00-04:00</updated><author><name>Adriano Gil</name></author><id>tag:localhost,2016-01-10:/install-block-fuel-theano.html</id><summary type="html">&lt;p class="first last"&gt;Tips to install Block, Fuel and Theano&lt;/p&gt;
</summary><content type="html">&lt;!-- Intro ============================================================================================================== --&gt;
&lt;p&gt;The very first step to develop a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Deep_learning"&gt;Deep Learning&lt;/a&gt; experiment - if you don't want to code everything from scratch - is to look for a proper 3rd party component that provides a straightforward interface and a great performance.&lt;/p&gt;
&lt;p&gt;In python, there are a lot of frameworks and libraries to work with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Deep_learning"&gt;Deep Learning&lt;/a&gt;. After I had participated in a course taught by &lt;a class="reference external" href="https://github.com/laurent-dinh"&gt;Laurent Dihn&lt;/a&gt; from University of Montreal, I was introduced to the combined toolkit of Theano, Blocks and Fuel.&lt;/p&gt;
&lt;!-- Explain Theano ===================================================================================================== --&gt;
&lt;p&gt;&lt;a class="reference external" href="http://deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt; is a very known mathematical python library used for deep learning. This library contains a lot of useful methods to simplify model generation like using derivative of symbolic functions. Due to its bindings with PyCuda, Theano allows to use the same code to evaluate on CPU or GPU only by changing a flag.&lt;/p&gt;
&lt;!-- Explain Blocks ====================================================================================================== --&gt;
&lt;p&gt;Blocks is a set of utilitary scripts that easen some tasks on Theano, like model generation, load and training data, and visualizing results.&lt;/p&gt;
&lt;!-- Explain Fuel ======================================================================================================== --&gt;
&lt;p&gt;Fuel is data processing library that handles some neat things like download and parse image datasets into numpy arrays. One of its advantage is a same interface that can handle a lot different types of data.&lt;/p&gt;
&lt;!-- Installation tips for Windows ======================================================================================= --&gt;
&lt;div class="section" id="installing-on-windows"&gt;
&lt;h2&gt;Installing on Windows&lt;/h2&gt;
&lt;p&gt;I found some useful tips on &lt;a class="reference external" href="https://www.reddit.com/r/MachineLearning/comments/3hkv2b/most_recent_way_to_install_theano_for_windows_10/"&gt;this reddit post&lt;/a&gt; and I have tested it on Windows 8.1 and Windows 10.&lt;/p&gt;
&lt;p&gt;The first step is download and install the &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Windows version of Anaconda&lt;/a&gt;. After a simple installation wizard, we need to install the required libraries for Theano. Thanks to Anaconda, we can use a very simple command-line tool &lt;cite&gt;conda&lt;/cite&gt; in the &lt;cite&gt;Anaconda Prompt&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install pip six nose numpy scipy graphviz
conda install mingw libpython
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some necessary python libraries are pre-requisite to specific Theano functions, like drawing debug graphs of operation nodes, and can also be used in Blocks or Fuel.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pydot2 progressbar2 picklable-itertools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Theano can be installed using &lt;cite&gt;pip&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install theano
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fuel can be downloaded directly from github repository: &lt;a class="reference external" href="https://github.com/mila-udem/fuel"&gt;https://github.com/mila-udem/fuel&lt;/a&gt;. In order to install it, we need to run the script &lt;cite&gt;setup.py&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; fuel
python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fuel can be downloaded directly from github repository: &lt;a class="reference external" href="https://github.com/mila-udem/blocks"&gt;https://github.com/mila-udem/blocks&lt;/a&gt;. In order to install it, we need to use python to execute the setuptools script &lt;cite&gt;setup.py&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; blocks
python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Testing Theano on Anaconda Prompt" src="images/2016-01-10-installing/mac-terminal.png" style="width: 444px; height: 210px;" /&gt;
&lt;p class="caption"&gt;Testing Theano on Anaconda Prompt&lt;/p&gt;
&lt;/div&gt;
&lt;!-- Installation tips for OSX --&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-on-osx"&gt;
&lt;h2&gt;Installing on OSX&lt;/h2&gt;
&lt;p&gt;According &lt;a class="reference external" href="http://deeplearning.net/software/theano/install.html#mac-os"&gt;Theano page about mac installation&lt;/a&gt; we can &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;download Anaconda&lt;/a&gt;  and then Theano can be installed by &lt;cite&gt;pip&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install pip six nose numpy scipy graphviz
pip install pydot2
pip install Theano
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After downloading Fuel &lt;a class="reference external" href="https://github.com/mila-udem/fuel"&gt;on github page&lt;/a&gt;, inside its folder there is a script &lt;cite&gt;setup.py&lt;/cite&gt; that handles the installation by means of setuptools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; fuel
python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once downloaded Blocks &lt;a class="reference external" href="https://github.com/mila-udem/blocks"&gt;from github page&lt;/a&gt;, you can install it by executing the setuptools script &lt;cite&gt;setup.py&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; blocks
python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Theano on Mac Terminal" src="images/2016-01-10-installing/mac-terminal.png" style="width: 444px; height: 210px;" /&gt;
&lt;p class="caption"&gt;Theano on Mac Terminal&lt;/p&gt;
&lt;/div&gt;
&lt;!-- Installation tips for Linux --&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-on-ubuntu"&gt;
&lt;h2&gt;Installing on Ubuntu&lt;/h2&gt;
&lt;p&gt;Some installation steps are published on &lt;a class="reference external" href="http://deeplearning.net/software/theano/install_ubuntu.html#install-ubuntu"&gt;Theano site&lt;/a&gt;, so by following it I easily managed to install it on Ubuntu 14.10.&lt;/p&gt;
&lt;p&gt;Download and e install all requisites of the libraries using &lt;cite&gt;apt-get&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-numpy python-scipy python-dev python-pip python-nose g++ libopenblas-dev git gfortran libhdf5-dev graphviz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then Theano can be installed by &lt;cite&gt;pip&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Theano
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fuel library can be also installed using &lt;cite&gt;pip&lt;/cite&gt; directly from github repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install git+git://github.com/mila-udem/fuel.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Blocks library also is installed by &lt;cite&gt;pip&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install git+git://github.com/mila-udem/blocks.git
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Running Theano on Ubuntu" src="images/2016-01-10-installing/ubuntu-terminal.png" style="width: 409px; height: 166px;" /&gt;
&lt;p class="caption"&gt;Running Theano on Ubuntu&lt;/p&gt;
&lt;/div&gt;
&lt;!-- IDE --&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-a-python-ide"&gt;
&lt;h2&gt;Installing a Python IDE&lt;/h2&gt;
&lt;p&gt;After some good experiences using PyDev and Eclipse, I recomend this light version &lt;cite&gt;Liclipse&lt;/cite&gt;: &lt;a class="reference external" href="http://www.liclipse.com/download.html"&gt;http://www.liclipse.com/download.html&lt;/a&gt;. Some other good options can be found in: &lt;a class="reference external" href="http://pedrokroger.net/choosing-best-python-ide/"&gt;http://pedrokroger.net/choosing-best-python-ide/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="LiClipse IDE on Ubuntu" src="images/2016-01-10-installing/ubuntu-liclipse.png" style="width: 455px; height: 441px;" /&gt;
&lt;p class="caption"&gt;LiClipse IDE&lt;/p&gt;
&lt;/div&gt;
&lt;!-- This will be turned into :abbr:`HTML (HyperText Markup Language)`. --&gt;
&lt;!-- [a link relative to content root]({filename}/article1.md) --&gt;
&lt;/div&gt;
</content><category term="deep-learning"></category></entry><entry><title>Hello World</title><link href="http://localhost:8000/hello-world.html" rel="alternate"></link><published>2016-01-01T14:00:00-04:00</published><updated>2016-01-01T14:00:00-04:00</updated><author><name>Adriano Gil</name></author><id>tag:localhost,2016-01-01:/hello-world.html</id><summary type="html">&lt;p class="first last"&gt;A very small self presentation&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Hi, everyone!&lt;/p&gt;
&lt;p&gt;That's my personal blog about my researches and some development notes. I guess every tech guy should have a blog. Well, after some years, I decided finally got mine.&lt;/p&gt;
&lt;p&gt;So, who am I? Well, I'm a &lt;a class="reference external" href="https://dl.dropboxusercontent.com/u/21219242/CV/adrianogil_cv_en.pdf"&gt;mobile developer&lt;/a&gt; and a &lt;a class="reference external" href="https://scholar.google.com.br/citations?user=n6RoXpAAAAAJ"&gt;Game AI researcher&lt;/a&gt;.  I have a master in Electric Engineering and a BSc. in Computer Engineering at Federal University of Amazonas.&lt;/p&gt;
&lt;p&gt;My interests lies in playing and developing games (Mobile and Desktop). In the next posts I’ll describe some of my projects related to game development, image processing research and machine learning algorithms.&lt;/p&gt;
&lt;p&gt;See you soon!&lt;/p&gt;
&lt;!-- This will be turned into :abbr:`HTML (HyperText Markup Language)`. --&gt;
&lt;!-- [a link relative to content root]({filename}/article1.md) --&gt;
</content><category term="welcome"></category></entry></feed>