<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>GilLabs</title>
 <link href="https://adrianogil.github.io/blog/fr/feed/" rel="self"/>
 <link href="https://adrianogil.github.io/blog/fr/"/>
 <updated>2025-02-05T19:27:10-04:00</updated>
 <id>https://adrianogil.github.io/</id>
 <author>
   <name>Adriano Gil</name>
   <email>adrianogil.san@gmail.com</email>
 </author>

 
 <entry>
   <title>Mon Flux de Travail de Blog avec Obsidian et Jekyll</title>
   <link href="https://adrianogil.github.io/2025/02/workflow-obsidian-jekyll/"/>
   <updated>2025-02-05T00:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/fr/2025/02/workflow-obsidian-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; est un &lt;strong&gt;générateur de site statique&lt;/strong&gt; qui transforme des fichiers Markdown en un site web pleinement fonctionnel. Tout est généré en HTML simple, ce qui facilite le déploiement sur des plateformes comme &lt;a href=&quot;https://docs.github.com/en/pages/quickstart&quot;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;écriture-avec-obsidian&quot;&gt;&lt;strong&gt;Écriture avec Obsidian&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;J’utilise &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt; pour l’écriture car :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Il prend en charge &lt;strong&gt;Markdown&lt;/strong&gt;, ce qui facilite la mise en forme des articles.&lt;/li&gt;
  &lt;li&gt;Je peux organiser mes posts avec des &lt;strong&gt;balises et des métadonnées&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Il centralise mes écrits avant publication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chaque article de blog contient des métadonnées indiquant s’il est prêt à être publié. Les brouillons sont exclus du traitement.&lt;/p&gt;

&lt;h3 id=&quot;utilisation-des-templates-dans-obsidian&quot;&gt;Utilisation des Templates dans Obsidian&lt;/h3&gt;

&lt;p&gt;Pour standardiser mes articles de blog, j’utilise des &lt;strong&gt;templates&lt;/strong&gt; dans Obsidian. Ceux-ci permettent de maintenir une cohérence entre les posts et d’accélérer le processus d’écriture. Ainsi, à chaque fois que je veux commencer un nouvel article, je crée d’abord une &lt;a href=&quot;https://github.com/adrianogil/ObsidianVault/blob/main/Templates/GilLabs%20Post%20Planning%20-%20Template.md&quot;&gt;note de planification&lt;/a&gt; avec des idées et des références. Ensuite, je crée une &lt;a href=&quot;https://github.com/adrianogil/ObsidianVault/blob/main/Templates/GilLabs%20Post%20Text%20-%20Template.md?plain=1&quot;&gt;note d’article&lt;/a&gt; contenant le texte complet et les métadonnées.&lt;/p&gt;

&lt;p&gt;En utilisant &lt;a href=&quot;https://blacksmithgu.github.io/obsidian-dataview/&quot;&gt;Dataview&lt;/a&gt;, un plugin Obsidian qui permet d’&lt;strong&gt;interroger et d’afficher dynamiquement du contenu&lt;/strong&gt; en fonction des métadonnées, je peux suivre l’avancement de mes posts, identifier les traductions manquantes et voir les notes associées.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-multiple-languages-plugin&quot;&gt;&lt;strong&gt;Jekyll-Multiple-Languages-Plugin&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Le plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-multiple-languages-plugin&lt;/code&gt; me permet d’organiser mon contenu en plusieurs langues en créant des versions différentes de chaque article. Voici son fonctionnement :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Mon blog prend en charge &lt;strong&gt;l’anglais, le portugais et le français&lt;/strong&gt;, configurés dans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; :&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;en&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pt&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fr&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;en&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chaque langue dispose de son propre répertoire dans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_i18n/&lt;/code&gt;, par exemple :&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  _i18n/en/_posts/2025-02-01-my-post.md
  _i18n/pt/_posts/2025-02-01-meu-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Le plugin génère automatiquement des URLs spécifiques à chaque langue :&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  https://adrianogil.github.io/blog/en/2025/02/my-post/
  https://adrianogil.github.io/blog/pt/2025/02/meu-post/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Les utilisateurs peuvent changer de langue à l’aide d’un &lt;strong&gt;sélecteur de langue&lt;/strong&gt; dans l’interface du blog.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;automatisation-du-traitement-des-articles-avec-python&quot;&gt;&lt;strong&gt;Automatisation du Traitement des Articles avec Python&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Copier manuellement les fichiers Markdown, gérer les images et manipuler les métadonnées peut être fastidieux. Pour simplifier le processus, j’utilise un script Python qui automatise les tâches suivantes :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extraire les articles de mon &lt;strong&gt;coffre Obsidian&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Copier et traiter les images.&lt;/li&gt;
  &lt;li&gt;Formater les métadonnées pour &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Placer le post final dans le répertoire de mon blog sur &lt;a href=&quot;https://docs.github.com/en/pages/quickstart&quot;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;récupération-des-notes&quot;&gt;&lt;strong&gt;Récupération des Notes&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;D’abord, il rassemble les notes marquées avec une balise spécifique (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GilLabs/posts/text&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_notes_from_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GilLabs/posts/text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_obsidian_notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;draft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cela garantit que seuls les &lt;strong&gt;articles publiés&lt;/strong&gt; sont traités.&lt;/p&gt;

&lt;h4 id=&quot;génération-du-fichier-de-blog-pour-jekyll&quot;&gt;&lt;strong&gt;Génération du Fichier de Blog pour Jekyll&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Chaque article est formaté selon la structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; de Jekyll avec la bonne &lt;strong&gt;date, langue et catégories&lt;/strong&gt;. Les métadonnées telles que &lt;strong&gt;le titre, la mise en page et les catégories&lt;/strong&gt; sont conservées.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Markdown&quot;&gt;---
categories: git
date: &apos;2025-02-01 16:41:00 &apos;
lang: en
lang-ref: intro-git
layout: post
title: Premiers pas avec Git
updated: 2025-02-01T16:41
---
## Introduction
Salut ! Il m&apos;arrive souvent d&apos;expliquer Git à partir de zéro,...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;4-déploiement-du-blog&quot;&gt;&lt;strong&gt;4. Déploiement du Blog&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Une fois que le script a mis à jour les fichiers HTML de mon projet Jekyll, je n’ai plus qu’à :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Construire le site&lt;/strong&gt; avec :&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://adrianogil.github.io/blog/2025/02/intro-git/&quot;&gt;Pousser les changements&lt;/a&gt; sur GitHub Pages&lt;/strong&gt; avec :&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
 git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Nouveau post de blog&quot;&lt;/span&gt;
 git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En quelques minutes, mon blog est en ligne !&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Premiers pas avec Git</title>
   <link href="https://adrianogil.github.io/2025/02/intro-git/"/>
   <updated>2025-02-01T00:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/fr/2025/02/intro-git</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Salut ! Je me retrouve souvent à expliquer Git depuis le début, alors j’ai décidé d’écrire ce petit guide introductif comme référence pratique. Ce guide vous aidera à comprendre les bases. À la fin de cet article, vous saurez comment configurer votre premier dépôt, effectuer votre premier commit et bien plus encore. C’est parti !&lt;/p&gt;

&lt;p&gt;Je vous recommande vivement d’avoir un dépôt local de test pour essayer chaque commande. Vous pourrez ainsi explorer librement votre dépôt et observer comment chaque commande modifie l’état actuel de vos fichiers et l’historique des commits.&lt;/p&gt;

&lt;h2 id=&quot;créer-votre-premier-dépôt-git&quot;&gt;Créer votre premier dépôt Git&lt;/h2&gt;

&lt;p&gt;Avant tout, configurons votre dépôt Git. C’est ici que l’historique de votre projet sera stocké.&lt;/p&gt;

&lt;p&gt;Pour créer un nouveau dépôt Git, ouvrez votre terminal, accédez au dossier de votre projet, puis exécutez :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cette commande initialise un tout nouveau dépôt Git dans votre dossier de projet. Simple, non ?&lt;/p&gt;

&lt;p&gt;Après l’exécution de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;, un dossier caché &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; est créé. Ce dossier contient toutes les métadonnées et objets nécessaires à Git pour suivre et gérer l’historique de votre projet.&lt;/p&gt;

&lt;h2 id=&quot;ajouter-des-fichiers-à-votre-dépôt&quot;&gt;Ajouter des fichiers à votre dépôt&lt;/h2&gt;

&lt;p&gt;Ajoutons maintenant des fichiers à votre dépôt.&lt;/p&gt;

&lt;p&gt;Pensez à la zone de staging comme à un panier d’achat : vous y ajoutez des modifications avant de les valider (commit). Pour ajouter un fichier, utilisez :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &amp;lt;nom_du_fichier&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remplacez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;nom_du_fichier&amp;gt;&lt;/code&gt; par le nom de votre fichier. Celui-ci est maintenant en zone de staging, où vous pouvez vérifier et préparer les modifications avant de les valider.&lt;/p&gt;

&lt;p&gt;Si vous voulez ajouter toutes les modifications dans le dossier courant (y compris les suppressions et modifications), utilisez :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pour voir les fichiers en attente de validation et ceux qui ont été modifiés, utilisez :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cette commande vous donne un résumé de l’état actuel de votre projet.&lt;/p&gt;

&lt;h2 id=&quot;valider-vos-modifications&quot;&gt;Valider vos modifications&lt;/h2&gt;

&lt;p&gt;Passons maintenant à la validation (commit) des modifications. Un commit est une capture instantanée de votre projet à un moment donné.&lt;/p&gt;

&lt;p&gt;Pour valider vos modifications avec un message, utilisez :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m &quot;Votre message de commit&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assurez-vous que votre message est clair et descriptif pour vous y retrouver plus tard.&lt;/p&gt;

&lt;h2 id=&quot;visualiser-lhistorique-des-commits&quot;&gt;Visualiser l’historique des commits&lt;/h2&gt;

&lt;p&gt;Voir l’historique des commits peut être très utile. Pour afficher votre historique des commits sous forme graphique, utilisez :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log --graph --all --oneline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cette commande permet de voir une représentation graphique de l’historique des commits, très utile pour comprendre l’évolution de votre projet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-02-01-intro-git/git_log_example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;envoyer-des-modifications-vers-un-dépôt-distant&quot;&gt;Envoyer des modifications vers un dépôt distant&lt;/h2&gt;

&lt;p&gt;Après avoir effectué des commits, vous voudrez peut-être partager votre travail ou le sauvegarder sur un dépôt distant comme GitHub.&lt;/p&gt;

&lt;p&gt;D’abord, ajoutez un dépôt distant. Par exemple, pour GitHub :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin https://github.com/votreutilisateur/votre-repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Puis, poussez vos modifications :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cette commande envoie vos modifications vers la branche principale (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;) du dépôt distant.&lt;/p&gt;

&lt;h2 id=&quot;comprendre-la-logique-git&quot;&gt;Comprendre la logique Git&lt;/h2&gt;

&lt;p&gt;Pour bien utiliser Git, il est important de comprendre ses concepts fondamentaux : le système de fichiers, la zone de staging et les commits.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Répertoire de travail (Système de fichiers)&lt;/strong&gt; : Lorsque vous modifiez des fichiers, vous travaillez directement dans le système de fichiers. Ces modifications ne sont pas encore suivies par Git.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Zone de staging&lt;/strong&gt; : Une fois les modifications faites, vous les ajoutez à la &lt;em&gt;zone de staging&lt;/em&gt; avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt;. La zone de staging agit comme un presse-papiers pour les changements que vous prévoyez d’inclure dans le prochain commit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Le commit comme un nœud dans l’arbre&lt;/strong&gt; : Une fois prêt, utilisez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; pour enregistrer une capture instantanée des modifications. Chaque commit forme un &lt;em&gt;nœud&lt;/em&gt; dans l’historique Git, connecté aux commits précédents. Une branche n’est qu’un pointeur vers une séquence de commits, et non un dossier séparé.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Une erreur courante est de considérer les branches comme des dossiers distincts, mais cette vision est trompeuse. Il est plus juste de voir Git comme un arbre de modifications où chaque commit est un nœud et les branches ne sont que des pointeurs.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Et voilà ! Vous avez fait vos premiers pas avec Git. Vous savez maintenant comment configurer un dépôt, ajouter des fichiers, valider des modifications, pousser vers un dépôt distant et comprendre la logique de Git.&lt;/p&gt;

&lt;p&gt;Là où Git est utilisé, il y a toujours de l’espoir. Avec Git, vous pouvez annuler des modifications, retrouver d’anciennes versions de votre code et collaborer facilement avec d’autres développeurs.&lt;/p&gt;

&lt;h2 id=&quot;ressources-supplémentaires&quot;&gt;Ressources supplémentaires&lt;/h2&gt;

&lt;p&gt;Si vous souhaitez approfondir Git, consultez ces ressources :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/doc&quot;&gt;Documentation officielle Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.github.com/&quot;&gt;Guides GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jvns.ca/#git&quot;&gt;Le blog de Julia Evans&lt;/a&gt; – Des explications intuitives sur Git.&lt;/li&gt;
  &lt;li&gt;Outils pour visualiser l’historique des commits : &lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;Sourcetree&lt;/a&gt; ou &lt;a href=&quot;https://www.gitkraken.com/&quot;&gt;GitKraken&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Mon Plan pour 2025</title>
   <link href="https://adrianogil.github.io/2025/01/2025-goals/"/>
   <updated>2025-01-01T00:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/fr/2025/01/2025-goals</id>
   <content type="html">&lt;p&gt;Il y a plusieurs années, j’ai lancé &lt;a href=&quot;https://adrianogil.github.io/blog/fr/&quot;&gt;ce blog&lt;/a&gt; comme une excuse pour documenter mon processus d’apprentissage dans certains domaines et fournir du matériel supplémentaire pour des cours ou des conférences que j’ai donnés. En 2025, je prévois d’utiliser cet espace de manière plus efficace—pour suivre ce sur quoi j’ai travaillé et réfléchir à mes progrès. Donc, pour le premier article de l’année, voici mes objectifs professionnels pour 2025.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;améliorer-mes-compétences-techniques&quot;&gt;&lt;strong&gt;Améliorer mes Compétences Techniques&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Avec plus de 10 ans d’expérience sur des &lt;a href=&quot;https://adrianogil.github.io/gameportfolio/&quot;&gt;projets Unity pour les jeux, la VR et l’AR&lt;/a&gt;—ainsi qu’un bagage en algorithmes de vision par ordinateur—j’ai eu la chance de relever des défis fascinants. Cependant, au cours de l’année dernière, j’ai recentré mes efforts sur le développement backend et mobile, et en 2025, je vais intensifier ces activités.&lt;/p&gt;

&lt;p&gt;Mon principal objectif est d’obtenir deux certifications : &lt;strong&gt;AWS Certified Developer&lt;/strong&gt; et &lt;strong&gt;Android Enterprise Professional&lt;/strong&gt;. Ces certifications approfondiront ma compréhension des services cloud et des solutions mobiles d’entreprise, me permettant de contribuer plus efficacement aux projets full-stack de mon équipe.&lt;/p&gt;

&lt;p&gt;En parallèle, j’ai commencé à étudier &lt;strong&gt;Godot&lt;/strong&gt; et &lt;strong&gt;Unreal Engine&lt;/strong&gt;, en explorant des techniques de génération procédurale de contenu (PCG) telles que la génération de maillages. C’est excitant de plonger dans ces moteurs et d’aborder des défis algorithmiques, ce que je prévois de poursuivre tout au long de l’année.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;recherche-doctorale--jeux-éducatifs-llms-et-ia-pour-les-jeux&quot;&gt;&lt;strong&gt;Recherche Doctorale : Jeux Éducatifs, LLMs et IA pour les Jeux&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Dans le cadre de mes études de doctorat, je mène des recherches sur la manière dont les grands modèles de langage (LLMs) peuvent être utilisés dans les jeux éducatifs. Mon objectif est d’explorer des méthodes qui réduisent le temps de développement et créent des jeux mieux alignés sur les objectifs pédagogiques en classe. Au cours des dernières années, j’ai publié quelques articles liés aux jeux éducatifs, dont un sur l’analyse de l’apprentissage présenté lors de &lt;a href=&quot;https://sol.sbc.org.br/index.php/sbgames_estendido/article/view/32061&quot;&gt;la conférence SBGames de l’année dernière&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En parallèle, j’explore également des techniques d’IA pour les jeux, telles que la génération procédurale de contenu (PCG) et l’apprentissage du comportement des PNJ, qui ont le potentiel de simplifier le développement d’expériences de jeu plus dynamiques et ciblées. Ces sujets ont été au centre de mon attention pendant un certain temps, et je suis enthousiaste à l’idée de continuer à travailler dessus.&lt;/p&gt;

&lt;p&gt;Cette année, je prévois d’avancer dans mes recherches et de partager des mises à jour au fur et à mesure. C’est un parcours exigeant mais gratifiant, et j’espère contribuer davantage aux domaines de l’IA et des jeux éducatifs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;objectifs-dapprentissage-des-langues&quot;&gt;&lt;strong&gt;Objectifs d’Apprentissage des Langues&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;L’apprentissage des langues est une passion de longue date, et 2025 ne fera pas exception. Mon plan pour l’année inclut l’amélioration de mes métriques dans toutes les langues que j’étudie. Voici comment je vais m’y prendre :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Systèmes de Répétition Espacée (SRS) :&lt;/strong&gt; Je vais élargir l’utilisation d’outils comme Anki et peut-être en développer de nouveaux pour rendre mes séances d’étude plus efficaces.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lecture et Écriture :&lt;/strong&gt; Je continuerai à investir du temps dans ces domaines pour renforcer mes bases. &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt; jouera un rôle clé ici en tant qu’espace pour rédiger de nouveaux textes et documenter des idées issues de mes séances de lecture.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Écoute :&lt;/strong&gt; Les podcasts resteront ma ressource principale pour améliorer la compréhension, et je prendrai des notes dans Obsidian pour capturer des phrases ou expressions importantes à revoir.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Parler :&lt;/strong&gt; Je prévois de pratiquer mes compétences de conversation plus régulièrement, notamment en utilisant le Mode Avancé de Voix dans ChatGPT pour des dialogues simulés.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;écrire-plus&quot;&gt;&lt;strong&gt;Écrire Plus&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Enfin, un de mes objectifs clés pour 2025 est d’écrire plus sur ce blog. Documenter mon parcours m’aide non seulement à réfléchir, mais aussi à partager des idées avec d’autres. Que ce soit sur la technologie, la recherche ou le développement personnel, je suis ravi de publier plus régulièrement cette année.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Voilà mon plan pour 2025 ! Si vous avez des objectifs similaires ou travaillez sur quelque chose d’intéressant, n’hésitez pas à partager—j’adorerais en entendre parler. Faisons de cette année une période de progrès et de croissance !&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>La règle de divisibilité par 3</title>
   <link href="https://adrianogil.github.io/2022/08/divisibility-of-3/"/>
   <updated>2022-08-26T10:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/fr/2022/08/divisibility-of-3</id>
   <content type="html">&lt;p&gt;En examinant les devoirs de ma fille, j’ai commencé à réfléchir un peu à la règle de divisibilité par 3. En fait, les opérations de base ont des propriétés intéressantes :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;La somme de n’importe quel nombre à 9 préserve la somme de ses chiffres.&lt;/li&gt;
  &lt;li&gt;N’importe quel nombre multiplié par 3 donne un nombre dont la somme de ses chiffres sera également un multiple de 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dans ce post, je vais analyser les raisons derrière chacune de ces propriétés.&lt;/p&gt;

&lt;h2 id=&quot;1-la-somme-de-nimporte-quel-nombre-à-9-préserve-la-somme-de-ses-chiffres&quot;&gt;1) La somme de n’importe quel nombre à 9 préserve la somme de ses chiffres&lt;/h2&gt;

&lt;p&gt;En considérant l’opération ci-dessous :&lt;/p&gt;

\[A + 9 = B\]

&lt;p&gt;La somme des chiffres de A sera égale à la somme des chiffres de B.&lt;/p&gt;

&lt;p&gt;Jetons un coup d’œil à quelques exemples :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple 1.1:&lt;/em&gt;&lt;/p&gt;

\[15 + 9 = 24\]

&lt;p&gt;la somme des chiffres de $15$ sera égale à la somme des chiffres de la valeur résultante $24$ ($2 + 4 = 6$)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple 1.2:&lt;/em&gt;&lt;/p&gt;

\[71 + 9 = 80\]

&lt;p&gt;$7 + 1$ est égal à $8 + 0$, tous les deux sont $8$.&lt;/p&gt;

&lt;h2 id=&quot;2-nimporte-quel-nombre-multiplié-par-3-donne-un-nombre-dont-la-somme-de-ses-chiffres-sera-également-un-multiple-de-3&quot;&gt;2) N’importe quel nombre multiplié par 3 donne un nombre dont la somme de ses chiffres sera également un multiple de 3&lt;/h2&gt;

&lt;p&gt;En considérant l’opération :&lt;/p&gt;

\[A * 3 = B\]

&lt;p&gt;Cette propriété implique que la somme des chiffres de B sera nécessairement un multiple de 3. Comme nous pouvons le voir dans les exemples ci-dessous :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple 2.1:&lt;/em&gt;&lt;/p&gt;

\[24 * 3 = 72\]

&lt;p&gt;Comme nous pouvons le remarquer, la somme des chiffres de $72$ est $7 + 2 = 9$, un multiple de 3.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple 2.2:&lt;/em&gt;&lt;/p&gt;

\[19 * 3 = 57\]

&lt;p&gt;La somme des chiffres de $57$ est $5 + 7 = 12$, également un multiple de 3.&lt;/p&gt;

&lt;h2 id=&quot;une-plongée-profonde-dans-la-règle-de-divisibilité-par-3&quot;&gt;Une plongée profonde dans la règle de divisibilité par 3&lt;/h2&gt;

&lt;p&gt;Au collège, nous apprenons la règle de divisibilité par 3 et nous acceptons qu’elle se produise sans vraiment comprendre pourquoi.&lt;/p&gt;

&lt;p&gt;Je viens de découvrir que la propriété 2 est dérivée de la propriété 1, c’est-à-dire que multiplier un nombre par 3, c’est aussi faire une somme avec 9.&lt;/p&gt;

&lt;p&gt;Comment est-ce possible?&lt;/p&gt;

&lt;p&gt;La multiplication est en réalité une séquence d’opérations d’addition, n’est-ce pas?&lt;/p&gt;

&lt;p&gt;Ainsi, une opération simple comme&lt;/p&gt;

\[3 * 4 = 12\]

&lt;p&gt;peut également être exprimée comme une séquence d’additions:&lt;/p&gt;

\[3 + 3 + 3 + 3 = 12\]

&lt;p&gt;Et peut être réarrangée pour devenir une somme avec $9$:&lt;/p&gt;

\[9 + 3 = 12\]

&lt;p&gt;Laissez-moi fournir des exemples supplémentaires pour montrer que la multiplication par 3 est équivalente à l’ajout d’un nombre à 9.&lt;/p&gt;

&lt;p&gt;Exemple 3.1&lt;/p&gt;

\[3*5 = 3+3+3+3+3 = 9+6 = 15.\]

&lt;p&gt;Exemple 3.2&lt;/p&gt;

\[3*6 = 3+3+3+3+3+3 = 9+9 = 18\]

&lt;h2 id=&quot;multiplier-par-3-signifie-ajouter-un-nombre-k-plus-9&quot;&gt;Multiplier par 3 signifie ajouter un nombre k plus 9&lt;/h2&gt;

&lt;p&gt;Par conséquent, nous pouvons conclure que la propriété 1 est à l’origine de la propriété 2. Lorsque l’on multiplie un nombre par $3$, cela implique l’ajout du nombre à un multiple de $9$. La propriété 1 garantit que la somme des chiffres du multiple de 3 sera préservée. Et étant donné que le multiple de 3 est lui-même un multiple de 3, la somme des chiffres du résultat sera également un multiple de 3.&lt;/p&gt;

&lt;p&gt;N’est-ce pas incroyable ?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity 101 : Un simple Space Invaders sans codage</title>
   <link href="https://adrianogil.github.io/2017/01/space-invaders/"/>
   <updated>2017-01-31T21:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/fr/2017/01/space-invaders</id>
   <content type="html">&lt;p&gt;Aujourd’hui, nous allons créer une version simplifiée de Space Invaders en utilisant &lt;i&gt;Unity&lt;/i&gt;. Le programme n’est pas l’objet de ce tutoriel. Nous utiliserons donc quelques scripts pour la &lt;a href=&quot;https://github.com/adrianogil/VisualBehaviors&quot;&gt;programmation visuelle&lt;/a&gt; (en réalité, des scripts basés sur des conditions) que j’ai créés pour enseigner Unity à mon université.&lt;/p&gt;

&lt;!-- New project --&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/00_first_screen.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commençons par créer un nouveau projet à l’intérieur de l’éditeur &lt;i&gt;Unity&lt;/i&gt; en appuyant sur le bouton &lt;i&gt;nouveau&lt;/i&gt; dans l’écran de démarrage. Maintenant, nommons le projet ‘MyGame’ et définissons également le chemin du projet où Unity va créer tous les fichiers de projet initiaux par défaut.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/01_new_project.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Projet MyGame” créé avec succès! Dans la figure suivante, nous pouvons voir le système de fichiers où &lt;i&gt;Unity&lt;/i&gt; a créé trois répertoires: Assets, Library et ProjectSettings.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Assets&lt;/b&gt; est l’endroit où nous devrions mettre les fichiers que nous souhaitons utiliser dans notre jeu : scripts, feuilles de sprites, textures, modèles 3D, etc.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Library&lt;/b&gt; est utilisé par &lt;i&gt;Unity&lt;/i&gt; pour générer des ressources pour chaque cible de construction. Nous allons donc trouver ici les fichiers réels de feuilles de sprites qui seront chargés par notre jeu en fonction de la configuration que nous choisissons. Par exemple, nous pouvons choisir une résolution réduite pour la cible Android et une compression et une résolution plus lourdes pour la cible de bureau.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;ProjectSettings&lt;/b&gt; stocke la configuration de notre projet : nom et version du projet, systèmes de tags et de couches, cibles de construction, etc.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Temp&lt;/b&gt; est un dossier temporaire pour assembler nos fichiers nécessaires dans l’exécutable final de construction (.exe, .app, .apk, etc.).&lt;/p&gt;

&lt;p&gt;En résumé : &lt;b&gt;Assets&lt;/b&gt;, &lt;b&gt;ProjectSettings&lt;/b&gt; sont destinés aux fichiers et aux configurations que nous allons changer nous-mêmes pendant le développement d’un jeu. &lt;b&gt;Library&lt;/b&gt; e &lt;b&gt;Temp&lt;/b&gt; ne sont destinés qu’à des objets internes à &lt;i&gt;Unity&lt;/i&gt;, nous ne devrions rien changer et ni les ajouter au contrôle de version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/02_file_system_project.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Il est important de comprendre que les projets Unity sont constitués de scènes. Chaque scène correspond à une partie de l’expérience de jeu, comme par exemple, une scène de menu, une scène de niveau 1, une scène de boss, etc. À l’intérieur de chaque scène, nous pouvons trouver de nombreux objets destinés à être interagis par le joueur, tels que les menus, les personnages, les objets améliorant les compétences. Ces objets sont connus sous le nom de &lt;i&gt;GameObjects&lt;/i&gt;. Et chaque &lt;i&gt;GameObject&lt;/i&gt; a quelques composants qui permettent de changer ses caractéristiques principales. Nous allons mieux comprendre cela dans les prochaines étapes de ce tutoriel.&lt;/p&gt;

&lt;p&gt;L’interface Unity est composée de ces onglets principaux :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hierarchie&lt;/strong&gt;: montre quels GameObjects se trouvent dans la scène.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Inspecteur&lt;/strong&gt;: permet d’ « inspecter les GameObjects », de voir ses composants et propriétés ou de changer les configurations de projet et d’actifs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Projet&lt;/strong&gt;: reflète le système de fichiers dans le chemin « MyGame/Assets/ »&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scène&lt;/strong&gt;: est une visualisation à un point spécifique de la scène de jeu, où nous pouvons voir et placer des GameObjects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jeu&lt;/strong&gt;: représente le jeu rendu réel, le jeu en cours d’exécution.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Console&lt;/strong&gt;: un onglet important pour le développement, montre les avertissements et les erreurs de scripts.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AssetStore&lt;/strong&gt;: où nous pouvons télécharger, acheter et vendre des actifs de jeu de tout type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/02_unity.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voici la disposition par défaut des onglets. Nous pouvons la changer dans le menu déroulant en haut à droite. Chaque option a une disposition différente d’onglets. De plus, nous pouvons également déplacer librement nos onglets et créer notre propre disposition en cliquant sur l’option “Enregistrer la disposition”. Dans l’image, j’ai créé mon “CrazyLayout”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/03_unity_layout.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jusqu’à présent, notre jeu est composé de deux &lt;strong&gt;GameObjets&lt;/strong&gt;: &lt;strong&gt;“Main Camera”&lt;/strong&gt; et &lt;strong&gt;“Directional Light”&lt;/strong&gt;. La liste des &lt;strong&gt;GameObjets&lt;/strong&gt; peut être vue dans l’onglet &lt;strong&gt;Hiérarchie&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/04_initial_hierarchy.png&quot; alt=&quot;Écran initial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans l’&lt;strong&gt;Objet de jeu Camera&lt;/strong&gt;, il y a quelques composants: Transform, Camera, GUILayer, FlareLayer et AudioListener.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/05_main_camera_gameobject.png&quot; alt=&quot;Écran initial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le composant &lt;strong&gt;Camera&lt;/strong&gt; permet de rendre le jeu. C’est comme une manière de voir ce qui se passe dans l’exécution du jeu à partir d’une position donnée. Tout comme une vraie caméra, il filme notre scène de jeu et la présente au joueur dans l’onglet &lt;strong&gt;Jeu&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/06_camera_component.png&quot; alt=&quot;Écran initial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le composant &lt;strong&gt;Transform&lt;/strong&gt; joue un rôle très important: il définit la position, la rotation et l’échelle des objets de jeu dans l’espace de la scène.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/07_transform_component.png&quot; alt=&quot;Écran initial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Créons quelques dossiers dans l’onglet &lt;strong&gt;Projet&lt;/strong&gt;. Il est généralement recommandé de suivre une &lt;a href=&quot;https://twitter.com/CiroContns/status/831547413290766338&quot;&gt;structure de nommage des dossiers&lt;/a&gt; pour faciliter la recherche des ressources au fur et à mesure que le projet grandit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/08_create_folder.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans ce projet, nous allons utiliser les dossiers suivants : Prefabs, Scenes et Scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/09_folders_created.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enregistrons notre scène dans &lt;em&gt;Scenes/Game.unity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/10_save_scene.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unity&lt;/em&gt; possède des éléments 3D de base (cube, sphère, cylindre, …) que nous pouvons utiliser dans nos jeux. En cliquant avec le bouton droit de la souris, nous voyons les options de la figure ci-dessous et ajoutons le cube à la scène du jeu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/11_create_cube.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans l’onglet &lt;em&gt;Hiérarchie&lt;/em&gt;, nous pouvons vérifier notre cube ajouté.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/12_cube_gameobject.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Et dans l’onglet &lt;strong&gt;Inspecteur&lt;/strong&gt;, nous pouvons voir ses composants :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt; : stocke les modifications de position, rotation et échelle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MeshFilter&lt;/strong&gt; : contient des informations sur la géométrie 3D de l’objet (aka. Mesh)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BoxCollider&lt;/strong&gt; : un composant important pour détecter les collisions pendant l’exécution du jeu&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MeshRenderer&lt;/strong&gt; : rend notre cube en utilisant les informations de géométrie (données Mesh) du composant MeshFilter et en utilisant les informations des &lt;a href=&quot;https://docs.unity3d.com/Manual/Materials.html&quot;&gt;Materials&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/13_cube_components.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nous pouvons changer la position du cube en éditant le champ &lt;strong&gt;Position&lt;/strong&gt; du composant &lt;strong&gt;Transform&lt;/strong&gt;. Il est également possible de simplement sélectionner et de déplacer les flèches qui apparaissent lors de la sélection du cube. Ce genre d’élément visuel est appelé &lt;strong&gt;Gizmo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/14_cube_transform.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lors de l’interaction avec ces &lt;strong&gt;Gizmo&lt;/strong&gt; rouges, bleus et verts, nous pouvons voir le cube se déplacer sur les axes X, Z, Y. Nous voyons également les modifications prendre effet sur le champ &lt;strong&gt;Position&lt;/strong&gt; du composant &lt;strong&gt;Transform&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Un astuce utile : nous pouvons réinitialiser toutes les modifications de transform en choisissant &lt;strong&gt;Reset&lt;/strong&gt; dans les options du composant (icône de petit moteur en haut à droite).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/15_transform_reset.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pour faciliter notre tâche de manipulation des cubes, nous allons changer la configuration de &lt;em&gt;snap&lt;/em&gt;. En mode &lt;em&gt;snap&lt;/em&gt;, notre cube peut être déplacé par une quantité fixe.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/16_snap_settings_menu.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans la fenêtre &lt;strong&gt;Paramètres de Snap&lt;/strong&gt;, nous pouvons configurer le mouvement de nos objets de jeu en mouvement &lt;em&gt;snap&lt;/em&gt;. Pour le moment, laissons les paramètres par défaut tels que nous pouvons le voir sur la figure ci-dessous.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/17_snap_settings_window.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En appuyant sur &lt;em&gt;Ctrl+D&lt;/em&gt; ou &lt;em&gt;Cmd+D&lt;/em&gt;, nous pouvons cloner l’objet de jeu sélectionné. Et en appuyant sur &lt;em&gt;Ctrl/Cmd&lt;/em&gt;, nous déplaçons les objets de jeu par incréments &lt;em&gt;snap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/18_cube_clone.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En clonant 13 cubes, c’est-à-dire en appuyant sur &lt;em&gt;Ctrl+D&lt;/em&gt; ou &lt;em&gt;Cmd+D&lt;/em&gt;, nous pouvons faire une ligne.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/19_cubes_selection.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L’option &lt;strong&gt;Vide&lt;/strong&gt; nous permet de créer un objet de jeu vide avec seulement le composant Transform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/20_create_empty.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Renommons l’objet de jeu vide en &lt;em&gt;Ligne&lt;/em&gt; et réinitialisons le composant &lt;strong&gt;Transform&lt;/strong&gt; à ses valeurs par défaut. Après avoir sélectionné tous les cubes, nous pouvons les faire glisser dans l’objet de jeu &lt;em&gt;Ligne&lt;/em&gt; dans l’onglet &lt;strong&gt;Hiérarchie&lt;/strong&gt;. &lt;em&gt;Ligne&lt;/em&gt; est maintenant le parent de tous les cubes. Lorsque nous sélectionnons ou déplaçons &lt;em&gt;Ligne&lt;/em&gt;, nous déplaçons également ses enfants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/21_create_lines.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En changeant les options d’ombrage de la scène &lt;a href=&quot;https://docs.unity3d.com/Manual/ViewModes.html&quot;&gt;shading-options&lt;/a&gt;, nous pouvons obtenir une meilleure visualisation pour nos cubes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/22_shading_mode.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maintenant, nous clonons l’objet de jeu &lt;em&gt;Ligne&lt;/em&gt;, ce qui signifie que nous clonons également ses 13 enfants cubes. De cette façon, nous pouvons créer deux autres lignes et les faire glisser vers le haut. Et lorsque nous sélectionnons un cube spécifique, nous pouvons également le supprimer en utilisant &lt;em&gt;del/Cmd+del&lt;/em&gt;. En répétant ces étapes de base, nous pouvons obtenir la structure suivante.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/23_copy_lines.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ensuite, nous copions une autre ligne pour obtenir le corps de notre personnage. Pour faciliter la manipulation de ces objets, créons un objet de jeu vide &lt;em&gt;Body&lt;/em&gt; et réinitialisons son Transform et en faisant en sorte que les objets &lt;em&gt;Ligne&lt;/em&gt; soient à l’intérieur en tant qu’enfants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/24_finished_body.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pour créer l’antenne, nous devons copier un seul cube.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/25_started_antenna.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Créons un objet de jeu vide &lt;em&gt;Antenne&lt;/em&gt; et réinitialisons son &lt;strong&gt;Transform&lt;/strong&gt; et en faisant en sorte que le dernier cube créé soit son parent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/26_antenna_empty.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloner quelques cubes de plus, nous finissons notre &lt;em&gt;Antenne&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/27_finished_antenna.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La prochaine étape consiste à créer le &lt;em&gt;GameObject Griffes&lt;/em&gt; et à réinitialiser son &lt;strong&gt;Transform&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/28_claws_empty.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En clonnant quelques cubes de plus tels que disposés dans l’image ci-dessous, nous avons fini les griffes de notre personnage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/29_claws_cubes.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maintenant, nous avons un &lt;em&gt;Space Invader&lt;/em&gt;. Pour faciliter sa manipulation, créons un &lt;em&gt;GameObject Cubes&lt;/em&gt; vide, réinitialisons son &lt;strong&gt;Transform&lt;/strong&gt; et faisons glisser &lt;em&gt;Corps, Antenne et Griffes&lt;/em&gt; dedans. Ensuite, nous pouvons enfin créer un &lt;em&gt;GameObject SpaceInvader&lt;/em&gt;, réinitialiser son &lt;strong&gt;Transform&lt;/strong&gt; et faire en sorte que tous les cubes en soient les enfants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/30_space_invaders_cubes.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En sélectionnant Cubes, changeons sa taille en (0,2, 0,2, 0,2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/31_downscale_invader.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En cliquant sur l’onglet &lt;strong&gt;Game&lt;/strong&gt;, nous pouvons voir comment notre personnage sera vu par le joueur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/32_invader_game_tab.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans notre &lt;strong&gt;Caméra&lt;/strong&gt;, changeons la propriété &lt;em&gt;Clear Flags&lt;/em&gt; en &lt;em&gt;Couleur solide&lt;/em&gt; et &lt;em&gt;couleur de fond&lt;/em&gt; en (0,0,0,0).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/33_camera_clear_flags.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En clonnant et en créant de nouveaux &lt;em&gt;GameObjects&lt;/em&gt; vides comme nous l’avons fait dans les étapes précédentes, nous avons notre &lt;em&gt;GameObject Joueur&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/34_player_cubes.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans l’onglet &lt;strong&gt;Game&lt;/strong&gt;, nous pouvons voir nos personnages de jeu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/35_player_game_tab.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pour ajouter du mouvement à notre jeu, utilisons des scripts que j’ai précédemment créés dans mon projet &lt;a href=&quot;https://github.com/adrianogil/VisualBehaviors&quot;&gt;Visual Behaviors&lt;/a&gt;. Téléchargez ou clonez ce projet dans le dossier Scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/36_copy_scripts.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En inspectant le &lt;em&gt;GameObject SpaceInvader&lt;/em&gt;, nous pouvons ajouter de nouveaux composants en appuyant sur le bouton &lt;em&gt;Ajouter composant&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/37_add_component.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ajoutons le script Move (du &lt;a href=&quot;https://github.com/adrianogil/VisualBehaviors/blob/master/Move.cs&quot;&gt;Visual Behaviors&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/38_add_move_invader.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Configurons le script Move.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/39_callevent_invader.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le script &lt;em&gt;CallEvent&lt;/em&gt; permet de changer le comportement d’autres scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/40_configure_callevent.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans le bloc &lt;em&gt;Action&lt;/em&gt;, appuyons sur le bouton + pour ajouter une action. Nous sélectionnons alors un &lt;em&gt;GameObject&lt;/em&gt; dont le comportement doit être modifié.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/41_configure_callevent.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maintenant, choisissons la méthode de composant que nous allons changer. Appelons &lt;em&gt;ChangeDirectionX&lt;/em&gt;, une méthode qui permet d’inverser la direction actuelle de déplacement du script &lt;em&gt;Move&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/42_configure_callevent.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le mouvement du joueur peut être effectué à l’aide de deux scripts &lt;em&gt;Move&lt;/em&gt; : un pour la direction de droite et un autre pour la direction de gauche.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/43_move_player.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ensuite, nous créons l’objet &lt;em&gt;Bullets&lt;/em&gt; comme indiqué sur l’image ci-dessous :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/44_bullets_gameobject.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ajoutons le script &lt;em&gt;Move&lt;/em&gt; à &lt;em&gt;Bullets&lt;/em&gt; pour faire monter les balles vers les envahisseurs de l’espace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/45_bullets_move.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En faisant glisser &lt;em&gt;Bullets&lt;/em&gt; dans l’onglet &lt;strong&gt;Project&lt;/strong&gt;, nous pouvons créer un &lt;a href=&quot;https://docs.unity3d.com/Manual/Prefabs.html&quot;&gt;préfabriqué&lt;/a&gt;, un objet préfabriqué qui peut être reproduit et instancié pendant l’exécution du jeu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/46_bullets_prefab.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Modifions la &lt;strong&gt;couche&lt;/strong&gt; de l’objet &lt;em&gt;Bullets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/47_edit_settings_layers.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Créons la &lt;strong&gt;couche&lt;/strong&gt; &lt;em&gt;Bullets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/48_tags_and_layers.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Et modifions ensuite le préfabriqué &lt;strong&gt;Bullets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/49_bullets_add_layer.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En ajoutant le script &lt;em&gt;Generate&lt;/em&gt; à l’objet &lt;em&gt;Player&lt;/em&gt;, nous pouvons permettre à notre joueur de tirer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/50_player_gen_bullets.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans l’objet &lt;em&gt;SpaceInvader&lt;/em&gt;, nous allons ajouter le script &lt;em&gt;DestroyMe&lt;/em&gt;. Configurons notre ennemi pour qu’il soit détruit à chaque fois qu’il touche une balle, c’est-à-dire un objet avec la couche &lt;em&gt;Bullets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pour détecter les collisions, nous avons besoin des composants &lt;strong&gt;BoxCollider&lt;/strong&gt; et &lt;strong&gt;RigidBody&lt;/strong&gt;. Faisons en sorte de geler la rotation de &lt;strong&gt;Rigidbody&lt;/strong&gt; et définissons la gravité à zéro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/51_invader_collision.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nous ne devons pas oublier d’activer la case à cocher &lt;em&gt;isTrigger&lt;/em&gt; dans le &lt;strong&gt;BoxCollider&lt;/strong&gt; de notre ennemi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/52_invader_collider.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ajoutons un &lt;strong&gt;BoxCollider&lt;/strong&gt; activé pour les déclencheurs dans &lt;em&gt;Bullet GameObject&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/53_bullets_collider.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nous avons ainsi réussi à créer un Space Invader fonctionnel ! Félicitations pour votre premier jeu &lt;em&gt;Unity&lt;/em&gt; !&lt;/p&gt;

&lt;!-- Links --&gt;

</content>
 </entry>
 
 <entry>
   <title>Kuarup: ma submission de la Global Game Jam 2016</title>
   <link href="https://adrianogil.github.io/2016/01/global-game-jam-2016/"/>
   <updated>2016-01-10T14:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/fr/2016/01/global-game-jam-2016</id>
   <content type="html">&lt;p&gt;Il y a quelques semaines, j’ai eu le privilège de participer à l’un des plus grands game jams jamais organisés: le &lt;a href=&quot;http://globalgamejam.org/&quot;&gt;Global Game Jam&lt;/a&gt;. J’ai eu la chance de travailler avec une équipe de personnes incroyablement talentueuses de l’Institut Samsung et de Samsung OCEAN. Notre designer, Rafael Lima, et nos développeurs, Bruno Araujo, Germano Assis et Marcus Brandt, étaient tous exceptionnels.&lt;/p&gt;

&lt;p&gt;Lorsque le game jam a commencé, le thème “Rituel” a été révélé. En conséquence, nous avons créé un jeu de puzzle coloré centré sur l’idée de sacrifier de mignons monstres. Nous avons interprété “rituel” comme la répétition de tâches, la magie et le sacrifice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-02-14-ggj16/screenshot.png&quot; alt=&quot;Kuarup&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mon rôle dans le projet était axé sur les principales fonctionnalités de jeu, notamment la logique derrière la chute des blocs et les animations attrayantes. J’ai également travaillé à la génération procédurale des adorables blocs de monstre. Le défi était de s’assurer que chaque niveau était toujours jouable. Pour y parvenir, nous avons employé une méthode pseudo-aléatoire et avons implémenté une mécanique de power-up qui permettait aux joueurs de supprimer des blocs de couleur spécifique.&lt;/p&gt;

&lt;p&gt;Le jeu que nous avons créé lors du Global Game Jam est désormais disponible en téléchargement sur le &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.pxlsquadgames.kuarup&quot;&gt;Google Play Store&lt;/a&gt;. N’oubliez pas de jouer à ce jeu de puzzle unique rempli de mignons monstres et de défis basés sur les couleurs!&lt;/p&gt;

&lt;p&gt;Je suis reconnaissant envers mon équipe pour ce projet fantastique et j’espère avoir l’occasion de travailler à nouveau ensemble à l’avenir.&lt;/p&gt;

&lt;p&gt;Jusqu’au prochain game jam!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Installation de Theano, Fuel et Blocks</title>
   <link href="https://adrianogil.github.io/2016/01/install-block-fuel-theano/"/>
   <updated>2016-01-10T14:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/fr/2016/01/install-block-fuel-theano</id>
   <content type="html">
&lt;p&gt;Le prémière pas pour la codification avec Apprentissage Profunde (plus connu avec les mots anglaises, &lt;a href=&quot;https://en.wikipedia.org/wiki/Deep_learning&quot;&gt;Deep Learning&lt;/a&gt;) est chercher une bonne interface que permis de implémenter le plus différents modèles neuronaux avec bonne performance.&lt;/p&gt;

&lt;p&gt;Dans python, il y a beaucoup de frameworks et bibliothèques pour travailler avec Apprentissage Profunde. Depuis que j’avait participé dans le course enseigné pour &lt;a href=&quot;https://github.com/laurent-dinh&quot;&gt;Laurent Dihn&lt;/a&gt; de l’Université de Montréal, j’ai decouvert les outils python Theano, Blocks et Fuel.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://deeplearning.net/software/theano/&quot;&gt;Theano&lt;/a&gt; est très connu como une bibliothèque mathématique en python en usant avec Apprentissage Profunde. Cette bibliothèque contient quelques méthodes pour simplifier la generation de modèles en usant de choses comme functions simboliques dérivé. Les bindings de PyCuda permettent de utiliser le même code dans la CPU et la GPU.&lt;/p&gt;

&lt;p&gt;Blocks est un ensemble de scripts utilitaires pour faciliter les tâches de Theano, comme génération de modèles, charger les
données, et en train de visualizer les resultats.&lt;/p&gt;

&lt;p&gt;Fuel est une bibliothèque pour le traitement des données comme télécharger et convertir les bases d’images en arrays numpy. L’avantage de sa utilisation de la même interface que manipule de différent types de données.&lt;/p&gt;

&lt;h1 id=&quot;installation-dans-le-windows&quot;&gt;Installation dans le Windows&lt;/h1&gt;

&lt;p&gt;J’ai trouvé quelques trucs dans &lt;a href=&quot;https://www.reddit.com/r/MachineLearning/comments/3hkv2b/most_recent_way_to_install_theano_for_windows_10/&quot;&gt;cet post reddit&lt;/a&gt; et je les ai testé dans Windows 8,1 et Windows 10.&lt;/p&gt;

&lt;p&gt;Le premier pas est télécharger et installer la version Windows d’&lt;a href=&quot;https://www.continuum.io/downloads&quot;&gt;Anaconda&lt;/a&gt;. Puis une simple assistant d’installation, il faut installer les bibliothèques necessaires à Theano en usant d’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Anaconda Prompt&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pip six nose numpy scipy graphviz
    conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mingw libpython&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Quelque bibliothèques pythons sont necessaires pour functions spécifiques Theano, comme dessiner les chartes de les noeud d’operations, et pour les frameworks Blocks et Fuel aussi.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pydot2 progressbar2 picklable-itertools&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Theano peut être installé au moyen du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;theano&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;C’est possible de télecharger Fuel directament de le repo github: https://github.com/mila-udem/blocks. Afin de l’installer, nous pouvons utiliser du python pour exécuter le script setuptools appelé &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fuel
    python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-01-10-installing/mac-terminal.png&quot; alt=&quot;En testant Theano dans l&apos;Anaconda&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;installation-dans-losx&quot;&gt;Installation dans l’OSX&lt;/h1&gt;

&lt;p&gt;Selon &lt;a href=&quot;http://deeplearning.net/software/theano/install.html#mac-os&quot;&gt;la page Theano de la installation mac&lt;/a&gt; nous pouvons &lt;a href=&quot;https://www.continuum.io/downloads&quot;&gt;télécharger Anaconda&lt;/a&gt; et puis installer Theano par moyen du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pip six nose numpy scipy graphviz
    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pydot2
    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Theano&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Puis télécharger Fuel dans &lt;a href=&quot;https://github.com/mila-udem/fuel&quot;&gt;la page Github&lt;/a&gt;, il y a un script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; que permis de faire la installation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fuel
    python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lorsque Blocks est téléchargé &lt;a href=&quot;https://github.com/mila-udem/blocks&quot;&gt;de la page github&lt;/a&gt;, c’est possible d’installer en usant du script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blocks
    python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-01-10-installing/mac-terminal.png&quot; alt=&quot;Theano dans le terminal Mac&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;installation-dans-lubuntu&quot;&gt;Installation dans l’Ubuntu&lt;/h1&gt;

&lt;p&gt;Quelques pas d’installation sont publié dans le &lt;a href=&quot;http://deeplearning.net/software/theano/install_ubuntu.html#install-ubuntu&quot;&gt;site du Theano&lt;/a&gt;, alors je montre qu’il avais fonctioner dans le Ubuntu 14.10.&lt;/p&gt;

&lt;p&gt;Télécharger et installer toutes les requis des bibliothèques en utilisant du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-numpy python-scipy python-dev python-pip python-nose g++ libopenblas-dev git gfortran libhdf5-dev graphviz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alors Theano est installé en usant du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Theano&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;La bibliothèque Fuel est installé par moyen du pip directement du repo github:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git+git://github.com/mila-udem/fuel.git &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;La bibliothèque Blocks est installé en usant du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git+git://github.com/mila-udem/blocks.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-01-10-installing/ubuntu-terminal.png&quot; alt=&quot;Theano dans l&apos;Ubuntu&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;installation-dune-ide-python&quot;&gt;Installation d’une IDE Python&lt;/h1&gt;

&lt;p&gt;J’ai de excellentes experiences avec PyDev et Eclipse, alors je recommend la version plus lève: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiClipse&lt;/code&gt;. Autres optiones sont explorées dans le link: http://pedrokroger.net/choosing-best-python-ide/.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-01-10-installing/ubuntu-liclipse.png&quot; alt=&quot;LiClipse IDE&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Salut Monde!</title>
   <link href="https://adrianogil.github.io/2016/01/hello-world/"/>
   <updated>2016-01-01T14:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/fr/2016/01/hello-world</id>
   <content type="html">&lt;p&gt;Salut mes amis,&lt;/p&gt;

&lt;p&gt;Voilà mon blog personnel sur mes recherches et quelques notes de dévelopment. Je pense que tous ceux qui travaille avec technologie doit avoir un blog. Alors, quelques années plus tard je decide d’avoir le mien.&lt;/p&gt;

&lt;p&gt;Bien, qui je suis? Moi, je suis un &lt;a href=&quot;https://dl.dropboxusercontent.com/u/21219242/CV/adrianogil_cv_en.pdf&quot;&gt;développeur mobile&lt;/a&gt; et &lt;a href=&quot;https://scholar.google.com.br/citations?user=n6RoXpAAAAAJ&quot;&gt;chercheur&lt;/a&gt; de l’Intelligence Artificiel des jeux vidéos. Je suis diplômé d’un Master en Génie Électrique et baccalauréaut en Génie informatique à l’Université Fédérale d’Amazonas.&lt;/p&gt;

&lt;p&gt;Mes intérêts sont jouer et développer des jeux vidéo (mobile et desktop). Il y a cinq ans je travaille avec dévellopment de logiciels, et dans les prochains posts je vais décrire quelquer projets de dévelopment de jeux vidéo, traîtement d’images et apprentissage automatique.&lt;/p&gt;

&lt;p&gt;À bientôt!&lt;/p&gt;

</content>
 </entry>
 

</feed>
