<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>GilLabs</title>
 <link href="https://adrianogil.github.io/blog/pt/feed/" rel="self"/>
 <link href="https://adrianogil.github.io/blog/pt/"/>
 <updated>2025-02-05T19:27:09-04:00</updated>
 <id>https://adrianogil.github.io/</id>
 <author>
   <name>Adriano Gil</name>
   <email>adrianogil.san@gmail.com</email>
 </author>

 
 <entry>
   <title>Meu workflow com Obsidian and Jekyll</title>
   <link href="https://adrianogil.github.io/2025/02/workflow-obsidian-jekyll/"/>
   <updated>2025-02-05T00:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/pt/2025/02/workflow-obsidian-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; é um &lt;strong&gt;gerador de site estático&lt;/strong&gt; que transforma arquivos Markdown em um site totalmente funcional. Tudo é convertido para HTML puro, o que facilita a implantação em plataformas como &lt;a href=&quot;https://docs.github.com/en/pages/quickstart&quot;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;escrevendo-no-obsidian&quot;&gt;&lt;strong&gt;Escrevendo no Obsidian&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Eu uso &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt; para escrever meu blog porque:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ele suporta &lt;strong&gt;Markdown&lt;/strong&gt;, facilitando a formatação dos posts.&lt;/li&gt;
  &lt;li&gt;Posso organizar os posts com &lt;strong&gt;tags e metadados&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Mantém meus textos centralizados antes da publicação.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cada post do blog contém metadados que determinam se está pronto para publicação. E dessa forma rascunhos são excluídos do processamento.&lt;/p&gt;

&lt;h3 id=&quot;usando-templates-no-obsidian&quot;&gt;Usando Templates no Obsidian&lt;/h3&gt;

&lt;p&gt;Para padronizar meus posts no blog, uso &lt;strong&gt;templates&lt;/strong&gt; no Obsidian. Eles ajudam a manter a consistência entre os posts e aceleram o processo de escrita. Sempre que quero começar um novo post, primeiro crio uma &lt;a href=&quot;https://github.com/adrianogil/ObsidianVault/blob/main/Templates/GilLabs%20Post%20Planning%20-%20Template.md&quot;&gt;nota de planejamento&lt;/a&gt; com ideias e referências. Depois, crio uma &lt;a href=&quot;https://github.com/adrianogil/ObsidianVault/blob/main/Templates/GilLabs%20Post%20Text%20-%20Template.md?plain=1&quot;&gt;nota do post&lt;/a&gt;, que contém o texto completo e os metadados do post.&lt;/p&gt;

&lt;p&gt;Usando o plugin &lt;a href=&quot;https://blacksmithgu.github.io/obsidian-dataview/&quot;&gt;Dataview&lt;/a&gt;, consigo &lt;strong&gt;consultar e exibir conteúdo dinamicamente&lt;/strong&gt; com base nos metadados, rastrear posts em diferentes estágios de conclusão, identificar traduções ausentes e visualizar notas relacionadas.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-multiple-languages-plugin&quot;&gt;&lt;strong&gt;Jekyll-Multiple-Languages-Plugin&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;O plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-multiple-languages-plugin&lt;/code&gt; me ajuda a estruturar o conteúdo em vários idiomas, criando versões diferentes para cada post. Aqui está como funciona:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Meu blog suporta &lt;strong&gt;inglês, português e francês&lt;/strong&gt;, configurados no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;en&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pt&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fr&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default_lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;en&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cada idioma tem seu próprio diretório dentro de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_i18n/&lt;/code&gt;, por exemplo:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  _i18n/en/_posts/2025-02-01-my-post.md
  _i18n/pt/_posts/2025-02-01-meu-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;O plugin gera automaticamente URLs específicas para cada idioma:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  https://adrianogil.github.io/blog/en/2025/02/my-post/
  https://adrianogil.github.io/blog/pt/2025/02/meu-post/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Os usuários podem alternar entre idiomas usando um &lt;strong&gt;seletor de idioma&lt;/strong&gt; na interface do blog.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;automatizando-o-processamento-dos-posts-com-python&quot;&gt;&lt;strong&gt;Automatizando o Processamento dos Posts com Python&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Copiar arquivos Markdown, gerenciar imagens e lidar com metadados manualmente pode ser trabalhoso. Para facilitar meu fluxo de trabalho, uso um script Python que automatiza as seguintes tarefas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extrai os posts do meu &lt;strong&gt;vault do Obsidian&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Copia e processa imagens.&lt;/li&gt;
  &lt;li&gt;Formata metadados para o &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Move o post final para o repositório do meu blog no &lt;a href=&quot;https://docs.github.com/en/pages/quickstart&quot;&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;extraindo-notas&quot;&gt;&lt;strong&gt;Extraindo Notas&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;O script primeiro busca notas marcadas com uma tag específica (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GilLabs/posts/text&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_notes_from_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GilLabs/posts/text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_obsidian_notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;draft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Isso garante que apenas os posts prontos para serem publicados sejam processados.&lt;/p&gt;

&lt;h4 id=&quot;gerando-o-arquivo-do-blog-no-jekyll&quot;&gt;&lt;strong&gt;Gerando o Arquivo do Blog no Jekyll&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Cada post é formatado na estrutura &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; do Jekyll com a &lt;strong&gt;data, idioma e categorias&lt;/strong&gt; corretas. Metadados como &lt;strong&gt;título, layout e categorias&lt;/strong&gt; são preservados.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Markdown&quot;&gt;---
categories: git
date: &apos;2025-02-01 16:41:00 &apos;
lang: en
lang-ref: intro-git
layout: post
title: Primeiros Passos com Git
updated: 2025-02-01T16:41
---
## Introdução
Olá! Muitas vezes me vejo explicando Git do zero,...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;4-publicando-o-blog&quot;&gt;&lt;strong&gt;4. Publicando o Blog&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Depois que o script atualiza os arquivos HTML no meu projeto Jekyll, eu simplesmente:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Compilo o site&lt;/strong&gt; com:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://adrianogil.github.io/blog/2025/02/intro-git/&quot;&gt;Envio as mudanças&lt;/a&gt; para o GitHub Pages&lt;/strong&gt; com:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;New blog post&quot;&lt;/span&gt;
git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Em poucos minutos, meu blog está no ar!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Primeiros Passos com Git</title>
   <link href="https://adrianogil.github.io/2025/02/intro-git/"/>
   <updated>2025-02-01T00:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/pt/2025/02/intro-git</id>
   <content type="html">&lt;h2 id=&quot;introdução&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Olá! Frequentemente me vejo explicando Git do zero, então decidi escrever este pequeno guia introdutório para servir de referência. Este guia vai te ajudar a entender o básico, desde como configurar seu primeiro repositório até fazer seu primeiro commit.&lt;/p&gt;

&lt;p&gt;Recomendo muito utilizar um repositório local de testes para experimentar cada comando. Assim, você poderá explorar livremente e perceber como cada comando altera o estado atual dos arquivos e o histórico de commits.&lt;/p&gt;

&lt;h2 id=&quot;configurando-seu-primeiro-repositório-git&quot;&gt;Configurando Seu Primeiro Repositório Git&lt;/h2&gt;

&lt;p&gt;Primeiro, vamos configurar seu repositório Git. É aqui que o histórico do seu projeto será armazenado.&lt;/p&gt;

&lt;p&gt;Para criar um novo repositório Git, abra seu terminal, navegue até o diretório do seu projeto e execute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esse comando configura um repositório Git dentro da pasta do seu projeto. Simples, né?&lt;/p&gt;

&lt;p&gt;Após rodar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;, um diretório oculto chamado &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; é criado. Esse diretório contém todos os metadados e objetos que o Git usa para rastrear e gerenciar o histórico do projeto.&lt;/p&gt;

&lt;h2 id=&quot;adicionando-arquivos-ao-repositório&quot;&gt;Adicionando Arquivos ao Repositório&lt;/h2&gt;

&lt;p&gt;Agora, vamos adicionar alguns arquivos ao repositório.&lt;/p&gt;

&lt;p&gt;Pense na área de staging como uma área temporária, onde você reúne todas as mudanças feitas que deseja que sejam futuramente salvas em um commit. Para adicionar um arquivo, use:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &amp;lt;nome_do_arquivo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Substitua &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;nome_do_arquivo&amp;gt;&lt;/code&gt; pelo nome do seu arquivo. Agora, ele está na área de staging. A área de staging permite revisar e preparar as mudanças antes de confirmá-las.&lt;/p&gt;

&lt;p&gt;Se quiser adicionar todas as mudanças no diretório atual (incluindo arquivos modificados e excluídos), use:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para ver o que está na área de staging e quais mudanças ainda não foram adicionadas, use:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esse comando fornece um resumo do estado atual do seu projeto.&lt;/p&gt;

&lt;h2 id=&quot;comitando-suas-mudanças&quot;&gt;Comitando Suas Mudanças&lt;/h2&gt;

&lt;p&gt;Agora, vamos fazer um commit das mudanças. Um commit é como uma foto instantânea do seu projeto em um determinado momento.&lt;/p&gt;

&lt;p&gt;Para fazer um commit com uma mensagem, use:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sua mensagem de commit&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Certifique-se de que sua mensagem seja clara e descritiva para facilitar a identificação do commit no futuro.&lt;/p&gt;

&lt;h2 id=&quot;visualizando-o-histórico-de-commits&quot;&gt;Visualizando o Histórico de Commits&lt;/h2&gt;

&lt;p&gt;Ver o histórico de commits pode ser muito útil. Para visualizar o histórico de commits, use:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esse comando mostra uma representação gráfica do histórico de commits, o que pode ser muito útil para entender a evolução do seu projeto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-02-01-intro-git/git_log_example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;enviando-mudanças-para-um-repositório-remoto&quot;&gt;Enviando Mudanças para um Repositório Remoto&lt;/h2&gt;

&lt;p&gt;Depois de fazer alguns commits, pode ser interessante compartilhar seu trabalho ou fazer um backup em um repositório remoto, como o GitHub.&lt;/p&gt;

&lt;p&gt;Primeiro, você precisa adicionar um repositório remoto. Se estiver usando o GitHub, o comando pode ser assim:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin https://github.com/seuusuario/seu-repositorio.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Em seguida, envie suas mudanças:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Esse comando faz o upload das mudanças para o branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; do repositório remoto.&lt;/p&gt;

&lt;h2 id=&quot;entendendo-a-mentalidade-git&quot;&gt;Entendendo a Mentalidade Git&lt;/h2&gt;

&lt;p&gt;Para aproveitar melhor o Git, é importante entender como ele funciona e suas principais áreas: o sistema de arquivos, a área de staging e os commits. O fluxo de trabalho no Git trata de como as mudanças passam por diferentes estágios até serem registradas no histórico do projeto.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Diretório de Trabalho (Sistema de Arquivos)&lt;/strong&gt;: Quando você modifica arquivos no seu projeto, está trabalhando diretamente no sistema de arquivos. Aqui, você cria, edita e exclui arquivos. Nessa fase, as mudanças ainda não estão sendo rastreadas pelo Git.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Área de Staging&lt;/strong&gt;: Após fazer mudanças, você adiciona os arquivos modificados à &lt;em&gt;área de staging&lt;/em&gt; usando o comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt;. Pense na área de staging como um espaço temporário onde você prepara quais mudanças serão incluídas no próximo commit. Esse passo permite controlar exatamente o que será registrado.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Commit como um Nó na Árvore&lt;/strong&gt;: Quando estiver pronto, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; para tirar uma “foto” das mudanças que estão na área de staging. Esse &lt;em&gt;snapshot&lt;/em&gt; funciona como um &lt;em&gt;nó&lt;/em&gt; no histórico de versões do Git, formando uma estrutura conectada. Cada commit aponta para seu antecessor, criando uma sequência de mudanças, e não apenas versões separadas. Um branch no Git é apenas um ponteiro para uma dessas sequências, e não um “container” separado. Entender esse fluxo torna muito mais fácil navegar pelo Git e aproveitar seu verdadeiro potencial.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Um erro comum ao aprender Git é pensar que os branches funcionam como pastas separadas, mas essa ideia pode ser enganosa. Em vez disso, é mais útil imaginar o Git como uma árvore de mudanças—onde cada commit é um nó e os branches são apenas ponteiros para diferentes sequências de snapshots.&lt;/p&gt;
&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;E é isso! Você acabou de dar seus primeiros passos com o Git. Agora, já sabe como configurar um repositório, adicionar arquivos, fazer commits, enviar mudanças para um repositório remoto e entender o básico de como o Git funciona. Continue praticando esses comandos e, em breve, você dominará o Git!&lt;/p&gt;

&lt;p&gt;Lembre-se: onde há Git, há esperança. Com ele, você pode reverter mudanças, recuperar versões antigas do seu código e até mesmo desfazer erros com facilidade. O Git permite que vários desenvolvedores trabalhem no mesmo projeto e é a melhor forma de compartilhar código com outras pessoas.&lt;/p&gt;

&lt;h2 id=&quot;recursos-adicionais&quot;&gt;Recursos Adicionais&lt;/h2&gt;

&lt;p&gt;Seguem alguns links de documentação, blogs e ferramentas que recomendo darem uma olhada:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/doc&quot;&gt;Documentação Oficial do Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.github.com/&quot;&gt;Guias do GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jvns.ca/#git&quot;&gt;Blog da Julia Evans&lt;/a&gt; – Recomendo muito! Explicações intuitivas sobre comandos e o funcionamento interno do Git.&lt;/li&gt;
  &lt;li&gt;Ferramentas para visualizar o histórico de commits, como &lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;Sourcetree&lt;/a&gt; ou &lt;a href=&quot;https://www.gitkraken.com/&quot;&gt;GitKraken&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Meu Roadmap para 2025</title>
   <link href="https://adrianogil.github.io/2025/01/2025-goals/"/>
   <updated>2025-01-01T00:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/pt/2025/01/2025-goals</id>
   <content type="html">&lt;p&gt;Há vários anos, dei inicio a &lt;a href=&quot;https://adrianogil.github.io/blog/pt/&quot;&gt;este blog&lt;/a&gt; como uma desculpa para documentar meu processo de aprendizado em algumas áreas e também como material adicional para cursos ou palestras que ministrei. Agora, em 2025, planejo fazer um uso melhor deste espaço—acompanhando o que tenho trabalhado e refletindo sobre meu progresso. Então, como primeiro post do ano, aqui estão meus objetivos profissionais para 2025.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;melhorando-habilidades-técnicas&quot;&gt;&lt;strong&gt;Melhorando Habilidades Técnicas&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Com mais de 10 anos de experiência em &lt;a href=&quot;https://adrianogil.github.io/gameportfolio/&quot;&gt;projetos de Unity para jogos, VR e AR&lt;/a&gt;—além de uma bagagem em algoritmos de visão computacional—tive a oportunidade de trabalhar em desafios bem interessantes. No entanto, no último ano, acabei focando mais em desenvolvimento backend e mobile, e em 2025, pretendo me aprofundar ainda mais nessas áreas.&lt;/p&gt;

&lt;p&gt;Meu principal objetivo é obter duas certificações: &lt;strong&gt;AWS Certified Developer&lt;/strong&gt; e &lt;strong&gt;Android Enterprise Professional&lt;/strong&gt;. Essas certificações irão aprofundar meu entendimento sobre serviços de nuvem e soluções móveis para empresas, permitindo-me contribuir de forma mais eficaz nos projetos full-stack da minha equipe.&lt;/p&gt;

&lt;p&gt;Além disso, comecei a estudar &lt;strong&gt;Godot&lt;/strong&gt; e &lt;strong&gt;Unreal Engine&lt;/strong&gt;, explorando técnicas de geração procedural de conteúdo (PCG), como geração de malhas. Tem sido empolgante mergulhar nessas &lt;em&gt;engines&lt;/em&gt; e pretendo continuar trabalhando nisso ao longo do ano.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;pesquisa-de-doutorado-jogos-educacionais-llms-e-ia-para-jogos&quot;&gt;&lt;strong&gt;Pesquisa de Doutorado: Jogos Educacionais, LLMs e IA para Jogos&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Nas aulas do doutorado, estou pesquisando como modelos de linguagem de larga escala (LLMs) podem ser usados em jogos educacionais. Meu objetivo é explorar métodos que reduzam o tempo de desenvolvimento e criem jogos mais alinhados aos objetivos pedagógicos em sala de aula. Nos últimos anos, publiquei alguns artigos relacionados a jogos educacionais, incluindo um sobre análise de aprendizado (&lt;strong&gt;learning analytics&lt;/strong&gt;) apresentado na &lt;a href=&quot;https://sol.sbc.org.br/index.php/sbgames_estendido/article/view/32061&quot;&gt;SBGames do ano passado&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Paralelamente, também estou explorando técnicas de IA para jogos, como geração procedural de conteúdo (PCG) e aprendizado de comportamento de NPCs, que têm o potencial de agilizar o desenvolvimento de experiências de jogo mais dinâmicas e direcionadas. Esses tópicos têm sido meu foco há algum tempo, e estou animado para continuar trabalhando neles.&lt;/p&gt;

&lt;p&gt;Neste ano, planejo avançar em minhas pesquisas e compartilhar atualizações conforme elas estiverem disponíveis. É uma jornada desafiadora, mas recompensadora, e espero contribuir ainda mais para os campos de IA e jogos educacionais.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;metas-de-aprendizado-de-línguas&quot;&gt;&lt;strong&gt;Metas de Aprendizado de Línguas&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Aprender línguas tem sido uma paixão de longa data, e 2025 não será diferente. Meu plano para o ano inclui melhorar meus indicadores em todas as línguas que estou estudando. Aqui está como pretendo fazer isso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sistemas de Repetição Espaçada (SRS):&lt;/strong&gt; Vou ampliar o uso de ferramentas como Anki e, possivelmente, desenvolver novas para melhorar ainda mais os meus estudos.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Leitura e Escrita:&lt;/strong&gt; Continuarei investindo tempo nessas áreas para construir uma base mais sólida. O &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt; será uma ferramenta-chave aqui, servindo como espaço para rascunhar novos textos e documentar insights das minhas leituras.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Escuta:&lt;/strong&gt; Podcasts continuarão sendo meu recurso principal para melhorar a compreensão, e farei anotações no Obsidian para capturar frases ou expressões importantes que eu queira revisar.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fala:&lt;/strong&gt; Planejo praticar habilidades de conversação com mais regularidade, incluindo o uso do Modo Avançado de Voz no ChatGPT para práticas de diálogo simuladas.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;escrever-mais&quot;&gt;&lt;strong&gt;Escrever Mais&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Finalmente, um dos meus objetivos principais para 2025 é escrever mais neste blog. Documentar minha jornada não só me ajuda a refletir, mas também permite que eu compartilhe ideias com outros. Seja sobre tecnologia, pesquisa ou crescimento pessoal, estou animado para postar com mais regularidade este ano.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Esse é meu roadmap para 2025! Se você tem objetivos semelhantes ou está trabalhando em algo interessante, sinta-se à vontade para compartilhar!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Entendendo a Divisibilidade por 3</title>
   <link href="https://adrianogil.github.io/2022/08/divisibility-of-3/"/>
   <updated>2022-08-26T10:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/pt/2022/08/divisibility-of-3</id>
   <content type="html">&lt;p&gt;Revisar junto com a filha as matérias da escola é uma boa oportunidade para entender melhor alguns conceitos. Como por exemplo, nas operações básicas existem algumas propriedades bem curiosas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;adição de qualquer número ao 9 preserva a soma de seus algarismos.&lt;/li&gt;
  &lt;li&gt;qualquer número multiplicado por 3 tem por resultado um número cuja soma dos algarismos também é um múltiplo por três&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Nesse post vou analisar os motivos para essas propriedades existirem.&lt;/p&gt;

&lt;h2 id=&quot;1-adição-de-qualquer-número-ao-9-preserva-a-soma-de-seus-algarismos&quot;&gt;1) adição de qualquer número ao 9 preserva a soma de seus algarismos.&lt;/h2&gt;

&lt;p&gt;Considerando a operação&lt;/p&gt;

\[A + 9 = B\]

&lt;p&gt;A soma dos dígitos de A será igual a soma dos dígitos de B.&lt;/p&gt;

&lt;p&gt;Veja alguns exemplos:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo 1.1:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Na operação&lt;/p&gt;

\[15 + 9 = 24\]

&lt;p&gt;a soma dos dígitos de $15$ ($1 + 5 = 6$) será igual a soma dos dígitos do valor resultante $24$ ($2 + 4 = 6$)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo 1.2:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Na soma&lt;/p&gt;

\[71 + 9 = 80\]

&lt;p&gt;da mesma forma teremos que $7 + 1$ será igual a $8 + 0$, ambos $8$&lt;/p&gt;

&lt;h2 id=&quot;2-qualquer-número-multiplicado-por-3-tem-por-resultado-um-número-cuja-soma-dos-algarismos-também-é-um-múltiplo-por-três&quot;&gt;2) qualquer número multiplicado por 3 tem por resultado um número cuja soma dos algarismos também é um múltiplo por três&lt;/h2&gt;

&lt;p&gt;Considerando a operação&lt;/p&gt;

\[A * 3 = B\]

&lt;p&gt;implica assim que a soma dos dígitos de B será um múltiplo de 3.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo 2.1:&lt;/em&gt;&lt;/p&gt;

\[24*3 = 72\]

&lt;p&gt;Nessa multiplicação temos que a soma dos dígitos do resultado será $7 + 2 = 9$, um múltiplo de $3$&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo 2.2:&lt;/em&gt;&lt;/p&gt;

\[19*3 = 57\]

&lt;p&gt;então a soma dos dígitos de $57$ será um multiplo de $3$ ($5 + 7 = 12$)&lt;/p&gt;

&lt;h2 id=&quot;mas-por-quê&quot;&gt;Mas por quê?&lt;/h2&gt;

&lt;p&gt;Parando para analisar essas duas propriedades após todos esses anos, só agora entendi que propriedade 2 é decorrência da propriedade 1, ou seja, a operação de multiplicar um número por três esconde uma soma com 9.&lt;/p&gt;

&lt;p&gt;Como assim?&lt;/p&gt;

&lt;p&gt;Bem, a multiplicação é na verdade uma soma, certo?&lt;/p&gt;

&lt;p&gt;Então, $3*4$ é a mesma coisa que $3+3+3+3$, que por sua vez podemos remanejar como  $9 + 3 = 12$. Assim se somarmos seus algarismos ($1 + 2 = 3$) teremos um múltiplo de $3$.&lt;/p&gt;

&lt;p&gt;E podemos testar isso com outros exemplos, onde é possível remanejar uma multiplicação por $3$ como uma soma com $9$:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo 3.1&lt;/em&gt;&lt;/p&gt;

\[3*5 = 3+3+3+3+3 = 9+6 = 15.\]

&lt;p&gt;Assim percebemos que a soma do resultado dá um múltiplo de $3 1+5 = 6$&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo 3.2&lt;/em&gt;&lt;/p&gt;

\[3*6 = 3+3+3+3+3+3 = 9+9 = 18\]

&lt;p&gt;Verificamos a propriedade 2, pois $1 + 8 = 9$.&lt;/p&gt;

&lt;h2 id=&quot;multiplicação-por-3-então-é-uma-soma-com-9&quot;&gt;Multiplicação por 3 então é uma soma com 9&lt;/h2&gt;

&lt;p&gt;Ou seja, a multiplicação de 3 vezes um número maior que 3 significa somar 9 + ‘alguma coisa’. Como essa ‘alguma coisa’ sempre é um múltiplo de 3 então o resultado de tudo isso vai manter a somatória dos dígitos e também será um múltiplo de 3.&lt;/p&gt;

&lt;p&gt;Louco né?&lt;/p&gt;

&lt;p&gt;Segue uma pseudo-prova:&lt;/p&gt;

&lt;p&gt;Assim considerando qualquer número $x &amp;gt; 3$ e um $k = x - 3$, temos:&lt;/p&gt;

\[3*x = 3*(k+3) = 3*k+9\]

&lt;p&gt;Como $3*k$ é um múltiplo de $3$ e dada a propriedade 1 então os algarismos de $3 * k + 9$ também serão múltiplos de $3$.&lt;/p&gt;

&lt;h2 id=&quot;por-que-a-propriedade-1-acontece&quot;&gt;Por que a propriedade 1 acontece?&lt;/h2&gt;

&lt;p&gt;Outro ponto a observar é que isso só acontece porque somar com $9$ é a mesma coisa que somar $10$ e subtrair $1$ ($10 - 1 = 9$), que soma um ao dígito da dezena $(+1)$ e subtrai um do dígito da unidade $(-1)$, implicando que a somatória dos dígitos não é afetada ($ +1 - 1 = 0$).&lt;/p&gt;

&lt;p&gt;E também podemos generalizar dizendo que a propriedade 2 acontece com toda base de número&lt;/p&gt;

\[3 * N + 1\]

&lt;p&gt;como por exemplo as bases decimal e hexadecimal.&lt;/p&gt;

&lt;p&gt;E o número que possui a propriedade 1 é sempre o número da base menos um: $9$ para a base decimal e $F$ para a base hexadecimal.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Como fazer um Space Invaders simples na Unity sem programação</title>
   <link href="https://adrianogil.github.io/2017/01/space-invaders/"/>
   <updated>2017-01-31T21:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/pt/2017/01/space-invaders</id>
   <content type="html">&lt;p&gt;Olá Pessoal,&lt;/p&gt;

&lt;p&gt;No post de hoje vou descrever como desenvolver uma versão simplificada do Space Invaders  na Unity. Esse tutorial não vai focar na programação, assim para gerar os comportamentos dos elementos de jogo, foi adotada uma série de scripts de comportamentos visuais (Visual Behaviors, um antigo projeto meu).&lt;/p&gt;

&lt;!-- New project --&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/00_first_screen.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Começamos com a criação de um projeto novo na Unity, após pressionar o new da tela inicial. Agora, colocamos um nome de projeto e qual o diretório onde esse projeto deverá ser criado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/01_new_project.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E assim o projeto “MyGame” foi criado com sucesso pela Unity. Na próxima figura, percebemos que no sistema de arquivos, a Unity criou três diretórios: Assets. Library e ProjectSettings. Na pasta Assets devemos colocar todos os arquivos que serão utilizados no jogo: scripts, spritesheets, texturas, modelos 3d, sons e etc. A pasta Library ficam os uma versão dos assets já compilados para se adequar as configurações de cada plataforma. Já na pasta ProjectSettings, a Unity armazena as configurações do projeto: seus sistemas de tags, layers, configurações de build e etc. Na pasta Temp o executável é montado no momento do processo de build do projeto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/02_file_system_project.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A interface da unity é dividida principalmente nas seguintes tabs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hierarchy: mostra quais os gameobjects estão em cena.&lt;/li&gt;
  &lt;li&gt;Inspector: permite inspecionar os componentes dos gamesobjects ou inspecionar as opções de configuração de projeto ou importação de assets.&lt;/li&gt;
  &lt;li&gt;Project: espelha a pasta MyGame/Assets/ do sistema de arquivos&lt;/li&gt;
  &lt;li&gt;Scene: é a minha cena de jogo, onde posso posicionar gameobjects&lt;/li&gt;
  &lt;li&gt;Game: é a tab que mostra a renderização e a execução do jogo&lt;/li&gt;
  &lt;li&gt;Console: mostra os erros e warnings do projeto&lt;/li&gt;
  &lt;li&gt;AssetStore: uma loja de assets da Unity para venda e compra de qualquer tipo de artefato para o desenvolvimento com a Unity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/02_unity.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esse layout de tabs é o default. Pode ser trocado no menu superior direito por algum das opções disponíveis. Ou mesmo pode ser editado, as tabs podem ser arrastadas livremente e ao criar um layout que o agrade, essa opção pode ser salva e carregada posteriormente em qualquer outro projeto dessa mesma máquina. Observem que eu criei a minha própria opção: “CrazyLayout”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/03_unity_layout.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bem, vamos tentar entender o que temos no nosso projeto da &lt;strong&gt;Unity&lt;/strong&gt; até agora. Olhando para a tab de &lt;strong&gt;Hierarchy&lt;/strong&gt; vemos dois GameObjects: &lt;strong&gt;“Main Camera”&lt;/strong&gt; e &lt;strong&gt;“Directional Light”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/04_initial_hierarchy.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No GameObject da câmera vemos vários componentes: Transform, Camera, GUILayer, FlareLayer, AudioListener.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/05_main_camera_gameobject.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O componente &lt;strong&gt;Camera&lt;/strong&gt; permite a renderização do jogo. Podemos pensar que ele age como uma câmera filmando nossa cena e apresentando o conteúdo filmando ao usuário através da tab &lt;strong&gt;Game&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/06_camera_component.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O componente &lt;strong&gt;Transform&lt;/strong&gt; é um dos mais importantes, através dele podemos alterar o posicionamento dos gameobjects no espaço da cena, além de sua rotação e escala.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/07_transform_component.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos criar algumas pastas na unity. Geralmente, recomenda-se seguir um padrão de &lt;a href=&quot;https://twitter.com/CiroContns/status/831547413290766338&quot;&gt;nomes de pastas&lt;/a&gt; para facilitar a busca por assets a medida que o projeto aumenta de tamanho.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/08_create_folder.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Neste projeto vamos usar as pastas: Prefabs, Scenes e Scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/09_folders_created.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos aproveitar para salvar nossa cena em &lt;strong&gt;Scenes/Game.unity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/10_save_scene.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;Unity&lt;/em&gt; traz alguns elementos básicos que podemos usar em nossos jogos. Seguindo a opção vista na imagem abaixo, vamos adicionar um cubo na cena.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/11_create_cube.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Assim, na tab de &lt;strong&gt;Hierarchy&lt;/strong&gt; podemos conferir o cubo adicionado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/12_cube_gameobject.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Já na tab de &lt;strong&gt;Inspector&lt;/strong&gt;, verificamos seus componentes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt;: para posicionamento, rotação e mudança de escala&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MeshFilter&lt;/strong&gt;: que armazena as informações de geometria do objeto (aka. Mesh).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BoxCollider&lt;/strong&gt;: um componente importante para detectar colisões no jogo&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MeshRenderer&lt;/strong&gt;: renderiza o nosso cubo a partir das informações de geometria contidas no MeshFilter e também usando as informações providas pelo Material&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/13_cube_components.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O posicionamento do cubo pode ser alterado ao inserir novos valores nos campos de &lt;strong&gt;Position&lt;/strong&gt; do &lt;strong&gt;Transform&lt;/strong&gt;. Também é possível na cena utilizar as setas azul, vermelha e verde que aparecem ao selecionar o cubo. Esse tipo de element visual é conhecido como &lt;strong&gt;Gizmo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/14_cube_transform.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;É possível resetar todas as alterações no &lt;strong&gt;Transform&lt;/strong&gt; atráves da opções &lt;strong&gt;Reset&lt;/strong&gt; no menu de configurações do componente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/15_transform_reset.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para facilitar nossa manipulação do cubo, vamos ativar as opções de &lt;em&gt;snap&lt;/em&gt;. No modo snap o cubo pode ser arrastado para qualquer uma das três direções em saltos de uma unidade fixa.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/16_snap_settings_menu.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na janela de &lt;strong&gt;Snap Settings&lt;/strong&gt; podemos configurar a movimentação do nosso cubo em modo &lt;em&gt;snap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/17_snap_settings_window.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ao pressionar Ctrl+D ou Cmd+D podemos clonar nosso cubo, e ao movimentar o cubo enquanto pressiona o Ctrl/Cmd podemos realizar o seu deslocamento em modo &lt;em&gt;snap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/18_cube_clone.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clonando vários cubos podemos fazer nossa linha, com exatos 13 cubos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/19_cubes_selection.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A opção &lt;strong&gt;Empty&lt;/strong&gt; permite criar um GameObject vazio, somente com o componente &lt;strong&gt;Transform&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/20_create_empty.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vou renomear o GameObject vazio para ‘Line’ e então resetar o &lt;strong&gt;Transform&lt;/strong&gt; para seus valores padrões. Ao selecionar todos os cubos, podemos arrastá-los para dentro da ‘Line’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/21_create_lines.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para melhor visualizar e editar o cubo, vou alterar as opções de &lt;a href=&quot;https://docs.unity3d.com/Manual/ViewModes.html&quot;&gt;shading&lt;/a&gt; da cena.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/22_shading_mode.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora ao clonar a ‘Line’ também estaremos clonando todos os 13 cubos contidos nela. Dessa maneira podemos a ‘Line’ duas vezes e arrastá-las para cima da linha original. Ao selecionar individualmente um cubo, podemos deletar apertando del/Cmd+del. Em poucos passos, nossos cubos podem ficar no formato da figura abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/23_copy_lines.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copiando mais uma linha para cima, temos o corpo do nosso personagem. Para deixar a visualização dos objetos mais fácil, vou criar um GameObject vazio ‘Body’, resetar seu &lt;strong&gt;Transform&lt;/strong&gt; e colocar como filhos todos os outros objetos ‘Line’ criados.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/24_finished_body.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copiando um cubo começamos o processo de criação da antena.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/25_started_antenna.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aproveito para criar um GameObject vazio chamado ‘Antenna’ resetando seu &lt;strong&gt;Transform&lt;/strong&gt; e arrasto o cubo criado anteriormente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/26_antenna_empty.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clonando mais alguns cubos, finalizamos a ‘Antenna’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/27_finished_antenna.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O próximo passo é criar um GameObject ‘Claws’ com seu &lt;strong&gt;Transform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/28_claws_empty.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clonando os cubos, tal como dispostos na imagem abaixo, finalizamos as garras do nosso personagem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/29_claws_cubes.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora nós temos o nosso &lt;em&gt;Space Invader&lt;/em&gt;. Para sua melhor edição, crio um GameObject ‘Cubes’ com &lt;strong&gt;Transform&lt;/strong&gt; resetado e arrasto o ‘Body’, ‘Antenna’ e ‘Claws’. Por fim, vamos criar um GameObject ‘SpaceInvaders’ também resetando seu &lt;strong&gt;Transform&lt;/strong&gt; para onde jogamos o ‘Cubes’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/30_space_invaders_cubes.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Selecionando o ‘Cubes’ alteramos sua escala para (0.2, 0.2, 0.2)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/31_downscale_invader.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicando na tab Games, podemos ver como o personagem será visualizado pelo jogador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/32_invader_game_tab.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na nossa câmera, alteramos a propriedade &lt;em&gt;‘Clear Flags’&lt;/em&gt; para ‘Solid Color’ e o cor de Background para (0,0,0,0).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/33_camera_clear_flags.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clonando e criando objetos vazios como nos passos anteriores, temos o nosso ‘Player’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/34_player_cubes.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora na tab de &lt;strong&gt;Game&lt;/strong&gt; podemos visualizar os nossos personagens.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/35_player_game_tab.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para adicionar mais movimento para nossa cena, vamos usar alguns scripts de programação &lt;a href=&quot;https://github.com/adrianogil/VisualBehaviors&quot;&gt;Visual&lt;/a&gt; para dentro da pasta ‘Scripts’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/36_copy_scripts.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inspecionado o GameObject ‘SpaceInvaders’ podemos adicionar novos componentes pressionando o botão ‘Add Component’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/37_add_component.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adicionando o script ‘Move’ do VisualBehaviors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/38_add_move_invader.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adicionando e configurando o script ‘Move’ do VisualBehaviors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/39_callevent_invader.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O script ‘CallEvent’ permite alterar o comportamento de outros scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/40_configure_callevent.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na bloco de ‘Action’, pressionamos o botão de ‘+’ para adicionar uma ação. Selecionamos um GameObject que irá sofrer a modificação de comportamento.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/41_configure_callevent.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora, escolhemos qual método de qual componente será alterado. O método ‘ChangeDirectionX’ permite inverter a direção de movimento do script ‘Move’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/42_configure_callevent.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O movimento do jogador pode ser implementado por dois componentes ‘Move’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/43_move_player.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Então criamos o GameObject ‘Bullets’ tal como mostrado na figura abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/44_bullets_gameobject.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adicionando o componente ‘Move’ para que nossa bala possa se movimentar para cima em direção ao ‘SpaceInvader’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/45_bullets_move.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Arrastando o GameObject ‘Bullets’ para a tab de &lt;strong&gt;Project&lt;/strong&gt; podemos criar um &lt;a href=&quot;https://docs.unity3d.com/Manual/Prefabs.html&quot;&gt;prefab&lt;/a&gt;, um objeto pre-fabricado que pode ser replicado ao longo do nosso jogo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/46_bullets_prefab.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos alterar a &lt;strong&gt;layer&lt;/strong&gt; do objeto ‘Bullets’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/47_edit_settings_layers.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Criamos a &lt;strong&gt;layer&lt;/strong&gt; ‘Bullets’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/48_tags_and_layers.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E alteramos o prefab ‘Bullets’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/49_bullets_add_layer.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ao adicionar o script ‘Generate’ podemos gerar nossos disparos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/50_player_gen_bullets.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No ‘SpaceInvaders’ adicionamos o script ‘DestroyMe’, configurando o nosso inimigo para ser destruído ao ser tocado por algum objeto da &lt;strong&gt;layer&lt;/strong&gt; ‘Bullets’ Também adicionamos o componente de colisão ‘BoxCollider’ e um RigidBody sem gravidade e com suas rotações congeladas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/51_invader_collision.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Não podemos esquecer de ativar o checkbox de ‘isTrigger’ do ‘BoxCollider’ do nosso inimigo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/52_invader_collider.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E na bala, adicionamos um BoxCollider também como trigger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-02-12-visualbehaviors/53_bullets_collider.png&quot; alt=&quot;Tela inicial&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pronto, então temos nosso space invader funcionando!&lt;/p&gt;

&lt;p&gt;Até um próximo tutorial!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Kuarup: um jogo de puzzle de cores na Global Game Jam 2016</title>
   <link href="https://adrianogil.github.io/2016/01/global-game-jam-2016/"/>
   <updated>2016-01-10T14:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/pt/2016/01/global-game-jam-2016</id>
   <content type="html">&lt;p&gt;Algumas semanas atrás participei em uma das mais conhecidas game jams: &lt;a href=&quot;http://globalgamejam.org/&quot;&gt;Global Game Jam&lt;/a&gt;. Foi um trabalho conjunto com um pessoal muito talentoso que conheci no SIDIA (Instituto da Samsung) e no Samsung OCEAN: Rafael Lima (designer), Bruno Araujo, Germano Assis and Marcus Brandt (devs).&lt;/p&gt;

&lt;p&gt;O tema dessa jam foi: Ritual. Decidimos então criar um jogo de puzzles baseado em cores, no qual o jogador escolheria monstros para sacrificar. Assim usamos “ritual” no sentido de repetição, de magia e de sacrificio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-02-14-ggj16/screenshot.png&quot; alt=&quot;Exemplo de uma fase no Kuarup&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Minha participação foi no gameplay, mais especificamente na geração procedural e na queda animada dos blocos. A parte difícil era garantir que nenhuma fase gerada fosse impossível de ser completada. Para isso, usamos alguns métodos de pseudo-aleatoriedade e também optamos por uma mecânica de power-ups para remover todos os blocos de mesma cor.&lt;/p&gt;

&lt;p&gt;Agradecimento especial a minha equipe pelo convite e pela horas agradáveis e corridas nesse desafio.&lt;/p&gt;

&lt;!-- And if are interested in the game, you can find the code on github --&gt;

&lt;p&gt;Até uma próxima game jam.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Instalando Blocks, Fuel e Theano</title>
   <link href="https://adrianogil.github.io/2016/01/install-block-fuel-theano/"/>
   <updated>2016-01-10T14:00:00-04:00</updated>
   <id>https://adrianogil.github.io/blog/pt/2016/01/install-block-fuel-theano</id>
   <content type="html">
&lt;p&gt;Uma das mais conhecidas bibliotecas python para Deep Learning é o &lt;a href=&quot;http://deeplearning.net/software/theano/&quot;&gt;Theano&lt;/a&gt;. Este post irá mostrar como realizar instalação do Theano e de algumas bibliotecas auxiliares (Blocks e Fuel) usando &lt;a href=&quot;https://www.continuum.io/downloads&quot;&gt;Anaconda&lt;/a&gt;, uma distribuição python bastante conhecida no meio acadêmico.&lt;/p&gt;

&lt;!-- [Theano][theano] is a very known mathematical python library used for deep learning. This library contains a lot of useful methods to simplify model generation like using derivative of symbolic functions. Due to its bindings with PyCuda, Theano allows to use the same code to evaluate on CPU or GPU only by changing a flag. --&gt;

&lt;!-- Blocks is a set of utilitary scripts that easen some tasks on Theano, like model generation, load and training data, and visualizing results. --&gt;

&lt;!-- Fuel is data processing library that handles some neat things like download and parse image datasets into numpy arrays. One of its advantage is a same interface that can handle a lot different types of data. --&gt;

&lt;h1 id=&quot;instalação-no-windows&quot;&gt;Instalação no Windows&lt;/h1&gt;

&lt;p&gt;Algumas dicas de instalação podem ser encontradas &lt;a href=&quot;https://www.reddit.com/r/MachineLearning/comments/3hkv2b/most_recent_way_to_install_theano_for_windows_10/&quot;&gt;neste post do reddit&lt;/a&gt;, e foram testadas no Windows 8.1 e Windows 10.&lt;/p&gt;

&lt;p&gt;O primeiro passo é baixar e instalar a versão &lt;a href=&quot;https://www.continuum.io/downloads&quot;&gt;Windows do Anaconda&lt;/a&gt;. Basta apenas seguir o wizard de instalação. Concluída a instalação, temos que instalar as bibliotecas necessárias para o Theano. Para isso, usamos a ferramenta de linha de comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt; que pode ser encontrada no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Anaconda Prompt&lt;/code&gt;, uma janela de comandos ao estilo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; customizada para o Anaconda.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pip six nose numpy scipy graphviz
    conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mingw libpython&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Algumas bibliotecas python adicionais são pré-requisito para algumas funções específicas do Theano, como desenhar gráficos de debug dos nodos de operações, ou são utilizadas no Blocks e no Fuels.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pydot2 progressbar2 picklable-itertools&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;E então finalmente instalar o Theano usando o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;theano&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A biblioteca auxiliar Fuel, utilizada para baixar datasets de imagens e processamento de dados em geral, pode ser baixada direto do github https://github.com/mila-udem/fuel. A instalação é feita pelo script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fuel
    python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Blocks, uma série de métodos utilitários para uso em conjunto com o Theano, é encontrada no github https://github.com/mila-udem/blocks. A instalação também é pela execução do script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blocks
    python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-01-10-installing/mac-terminal.png&quot; alt=&quot;Testando Theano no Terminal&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;instalação-no-osx&quot;&gt;Instalação no OSX&lt;/h1&gt;

&lt;p&gt;Segundo &lt;a href=&quot;http://deeplearning.net/software/theano/install.html#mac-os&quot;&gt;este link&lt;/a&gt; a instalação do Theano é bem similar com a do Windows. Primeiramente instalamos a &lt;a href=&quot;https://www.continuum.io/downloads&quot;&gt;versão OSX do Anaconda&lt;/a&gt; e então o Theano pode ser instalado pelo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pip six nose numpy scipy graphviz
    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pydot2
    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Theano&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fuel, baixado em https://github.com/mila-udem/fuel, pode ser instalado pelo script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fuel
    python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mila-udem/blocks&quot;&gt;Blocks&lt;/a&gt;, uma vez baixado, segue a mesma instalação pela execução do script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blocks
    python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-01-10-installing/mac-terminal.png&quot; alt=&quot;Testando Theano no Terminal&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;instalação-no-ubuntu&quot;&gt;Instalação no Ubuntu&lt;/h1&gt;

&lt;p&gt;O próprio &lt;a href=&quot;http://deeplearning.net/software/theano/install_ubuntu.html#install-ubuntu&quot;&gt;site do Theano&lt;/a&gt; explica como fazer a instalação do Theano no Ubuntu, reproduzo aqui o que testei no Ubuntu 14.10.&lt;/p&gt;

&lt;p&gt;Baixar e instalar as requisitos das bibliotecas se torna bem simples usando o comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-numpy python-scipy python-dev python-pip python-nose g++ libopenblas-dev git gfortran libhdf5-dev graphviz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Então o Theano pode ser baixado e instalado usando o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Theano&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A biblioteca auxiliar Fuel, utilizada para baixar datasets de imagens e processamento de dados em geral, pode ser instalada usando o comando&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git+git://github.com/mila-udem/fuel.git &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Blocks, uma série de métodos utilitários para uso em conjunto com o Theano, é também instalada facilmente usando o comando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git+git://github.com/mila-udem/blocks.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-01-10-installing/ubuntu-terminal.png&quot; alt=&quot;Testando Theano no Terminal&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ide-para-desenvolver-em-python&quot;&gt;IDE para desenvolver em python&lt;/h1&gt;

&lt;p&gt;Como IDE, pela minha boa experiência com o plugin para o eclipse PyDev, recomendo instalar a sua versão mais leve, o LiClipse, disponível em http://www.liclipse.com/download.html.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2016-01-10-installing/ubuntu-liclipse.png&quot; alt=&quot;LiClipse IDE no Ubuntu&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Olá Mundo!</title>
   <link href="https://adrianogil.github.io/2016/01/hello-world/"/>
   <updated>2016-01-01T09:02:47-04:00</updated>
   <id>https://adrianogil.github.io/blog/pt/2016/01/hello-world</id>
   <content type="html">&lt;p&gt;Olá pessoal,&lt;/p&gt;

&lt;p&gt;este é meu blog pessoal onde vou abordar algumas das minhas pesquisas e também dicas de desenvolvimento. Dizem por aí que ter um blog é imprescindível para quem trabalha com tecnologia, então eu agora finalmente decidi começar o meu.&lt;/p&gt;

&lt;p&gt;Bem, então para me apresentar: meu nome é Adriano Gil e sou &lt;a href=&quot;https://dl.dropboxusercontent.com/u/21219242/CV/adrianogil_cv_en.pdf&quot;&gt;desenvolvedor&lt;/a&gt; e &lt;a href=&quot;https://scholar.google.com.br/citations?user=n6RoXpAAAAAJ&quot;&gt;pesquisador em IA para Jogos&lt;/a&gt;. Tenho mestrado em Engenharia elétrica e sou formado em Engenharia da Computação pela Universidade Federal do Amazonas.&lt;/p&gt;

&lt;p&gt;Tenho grande interesse no desenvolvimento de jogos (mobile ou desktop), e nos últimos 5 anos tenho trabalhado com desenvolvimento, então nos próximos posts vou descrever alguns projetos de desenvolvimento de jogos, pesquisa em processamentos de imagens e em aprendizagem de máquina.&lt;/p&gt;

&lt;p&gt;Até um próximo post!&lt;/p&gt;

</content>
 </entry>
 

</feed>
